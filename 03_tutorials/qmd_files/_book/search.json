[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Computational Text Analysis",
    "section": "",
    "text": "Welcome to Computational Text Analysis, Jour 389R/689R, for the Fall 2024.\nThis course introduces students to key skills and concepts in the digital humanities and how they can be applied to content analysis. Students will learn how to gather textual data, process it and conduct computational textual analysis, sentiment analysis, narrative analysis, machine learning and topic modeling using the R programming language. Then, you will process your findings into various data visualization programs.\nStudents can learn these skills using some prepared datasets from the professor or bring their own projects, subject to prior arrangement with the professor.\nThis class welcomes people who have never coded. You will learn R, the open-source statistical software that’s widely used in newsrooms and academia. The training on R will be focused on news content analysis tasks.\nWe have some basic goals for you to reach in this class. Here are the course learning outcomes:\n\n\n\nYou will demonstrate a basic to intermediate proficiency in R, a popular open source statistical program, through the following tasks.\nYou will install relevant software libraries such as tidyverse and how to discover new software libraries to meet your needs.\nYou apply your knowledge about the software to load structured and unstructured data, perform basic data cleaning, solve basic data problems with numeric, character and date data fields.\nYou will create basic queries to produce summary tables and descriptive statistics. You will create basic data visualizations.\nYou will compose a full coding report using markdown language which can be produced in websites and other documents.\n\n\n\n\n\nYou will be trained on best practices to extract specific material from digitized historical records You will recognize and interpret metadata (such as headline, date, publication) and use to conduct analysis of journalistic content.\nYou will demonstrate proficiency in translating PDF and other documents into raw text prepared for machine learning.\nYou will apply basic machine learning tasks on the prepared raw text such as sentiment analysis.\nYou will evaluate the output from sentiment analysis and other machine learning tools to describe narrative patterns in the Journalistic texts.\n\n\n\n\n\nYou apply basic principles of qualitative and quantitative content analysis when examining a corpus of news content.\nYou will create a coding schema with clear categories by which to analyze the news content.\nYou will construct basic computer code to categorize news content according to your coding schema.\n\n\n\n\n\nYou will acquire historical research skills to provide the necessary context for your data research.\nYou will synthesize your findings and data analysis into a progress report memo.\n\n\n\n\nThis book begins with a basic review of Google Sheets and then shifts to the R statistical language. To follow along, you’ll do the following:\n\nInstall the R language on your computer. Go to the this website, click download R based on your operating system. If that link somehow doesn’t work, check R Project website and find a different location.\nInstall R Studio Desktop. The free version is great.\n\nGoing forward, you’ll see passages like this:\n\ninstall.packages(\"tidyverse\")\n\nThat is code that you’ll need to run common software packages in your R Studio.\n\n\n\nRob Wells has provided lessons from his own research projects and adapted a collection of class materials compiled by various data journalism professors around the country. Many thanks to Matt Waite at the University of Nebraska-Lincoln’s College of Journalism and Mass Communications and Sarah Cohen of Arizona State University, Sean Mussenden and Derek Willis, at the University of Maryland Philip Merrill College of Journalism.\nThere’s some things you should know about it:\n\nIt is free for students.\nThe topics will remain the same but the text is going to be constantly tinkered with.\nWhat is the work of the authors is copyright Rob Wells 2024, Sean Mussenden and Derek Willis 2022, Matt Waite 2020 and Sarah Cohen 2022.\nThe text is Attribution-NonCommercial-ShareAlike 4.0 International Creative Commons licensed. That means you can share it and change it, but only if you share your changes with the same license and it cannot be used for commercial purposes. I’m not making money on this so you can’t either.\nAs such, the whole book – authored in Quarto – in its original form is open sourced on Github. Pull requests welcomed!\n\n\n\n\n\nSpreadsheets\nR Basics\nReplication, Data Diary\nData basics and structures\nAggregates\nMutating\nWorking with dates\nFilters\nData cleaning techniques, Janitor\nPulling Data from PDFs\nJoins\nVisualizing for reporting: Basics\nVisualizing for reporting: Publishing\nText analysis basics\nWriting with and about data\nData journalism ethics\nTokenizing text\nPerforming sentiment analysis\nKeyword in context\nBasic narrative analysis\nTopic modeling"
  },
  {
    "objectID": "start-story.html",
    "href": "start-story.html",
    "title": "2  Learn a new way to read",
    "section": "",
    "text": "Getting started in data journalism often feels as if you’ve left the newsroom and entered the land of statistics, computer programming and data science. This chapter will help you start seeing data reporting in a new way, by learning how to study great works of the craft as a writer rather than a reader.\nJelani Cobb tweeted, “an engineer doesn’t look at a bridge the same way pedestrians or drivers do.” They see it as a “language of angles and load bearing structures.” We just see a bridge. While he was referring to long-form writing, reporting with data can also be learned by example – if you spend enough time with the examples.\nAlmost all good writers and reporters try to learn from exemplary work. I know more than one reporter who studies prize-winning journalism to hone their craft. This site will have plenty of examples, but you should stay on the lookout for others."
  },
  {
    "objectID": "start-story.html#read-like-a-reporter",
    "href": "start-story.html#read-like-a-reporter",
    "title": "2  Learn a new way to read",
    "section": "2.1 Read like a reporter",
    "text": "2.1 Read like a reporter\nTry to approach data or empirical reporting as a reporter first, and a consumer second. The goal is to triangulate how the story was discovered, reported and constructed. You’ll want to think about why this story, told this way, at this time, was considered newsworthy enough to publish when another approach on the same topic might not have been.\n\nWhat were the questions?\nIn data journalism, we often start with a tip, or a hypothesis. Sometimes it’s a simple question. Walt Bogdanich of The New York Times is renowned for seeing stories around every corner. Bogdanich has said that the prize-winning story “A Disability Epidemic Among a Railroad’s Retirees” came from a simple question he had when railway workers went on strike over pension benefits – how much were they worth? The story led to an FBI investigation and arrests, along with pension reform at the largest commuter rail in the country.\nThe hypothesis for some stories might be more directed. In 2021, the Howard Center for Investigative Journalism at ASU published “Little victims everywhere”, a set of stories on the lack of justice for survivors of child sexual assault on Native American reservations. That story came after previous reporters for the center analyzed data from the Justice Department showing that the FBI dropped most of the cases it investigated, and the Justice Department then only prosecuted about half of the matters referred to it by investigators. The hypothesis was that they were rarely pursued because federal prosecutors – usually focused on immigration, white collar crime and drugs – weren’t as prepared to pursue violent crime in Indian Country.\nWhen studying a data-driven investigation, try to imagine what the reporters were trying to prove or disprove, and what they used to do it. In journalism, we rely on a mixture of quantitative and qualitative methods. It’s not enough to prove the “numbers” or have the statistical evidence. That is just the beginning of the story. We are supposed to ground-truth them with the stories of actual people and places.\n\n\nGo beyond the numbers\nIt’s easy to focus on the numbers or statistics that make up the key findings, or the reason for the story. Some reporters make the mistake of thinking all of the numbers came from the same place – a rarity in most long-form investigations. Instead, the sources have been woven together and are a mix of original research and research done by others. Try to pay attention to any sourcing done in the piece. Sometimes, it will tell you that the analysis was original. Other times it’s more subtle.\nBut don’t just look at the statistics being reported in the story. In many (most?) investigations, some of the key people, places or time elements come directly from a database.\nSarah Cohen at Arizona State University analyzed the Paycheck Protection Program loan data for ProPublica and found a handful of sketchy-looking records from a single county in coastal New Jersey. It turned out to be a pretty good story.\nOften, the place that a reporter visits is determined by examples found in data. In this story on rural development funds, all of the examples came from an analysis of the database. Once the data gave us a good lead, the reporters examined press releases and other easy-to-get sources before calling and visiting the recipients or towns."
  },
  {
    "objectID": "start-story.html#reading-tips",
    "href": "start-story.html#reading-tips",
    "title": "2  Learn a new way to read",
    "section": "2.2 Reading tips",
    "text": "2.2 Reading tips\nYou’ll get better at reading investigations and data-driven work over time, but for now, remember to go beyond the obvious:\n\nWhere might the reporters have found their key examples, and what made them good characters or illustrations of the larger issue? Could they have come from the data?\nWhat do you think came first – a narrative single example that was broadened by data (naively, qualitative method), or a big idea that was illustrated with characters (quantitative method)?\nWhat records were used? Were they public records, leaks, or proprietary data?\nWhat methods did they use? Did they do their own testing, use statistical analysis, or geographic methods? You won’t always know, but look for a methodology section or a description alongside each story.\nHow might you localize or adapt these methods to find your own stories?\nPick out the key findings (usually in the nut graf or in a series of bullets after the opening chapter): are they controversial? How might they have been derived? What might have been the investigative hypothesis? Have they given critics their due and tried to falsify their own work?\nHow effective is the writing and presentation of the story? What makes it compelling journalism rather than a dry study? How might you have done it differently? Is a video story better told in text, or would a text story have made a good documentary? Are the visual elements well integrated? Does the writing draw you in and keep you reading? Think about structure, story length, entry points and graphics all working together.\nAre you convinced? Are there holes or questions that didn’t get addressed?"
  },
  {
    "objectID": "start-story.html#analyze-data-for-story-not-study",
    "href": "start-story.html#analyze-data-for-story-not-study",
    "title": "2  Learn a new way to read",
    "section": "2.3 Analyze data for story, not study",
    "text": "2.3 Analyze data for story, not study\nAs journalists we’ll often be using data, social science methods and even interviewing differently than true experts. We’re seeking stories, not studies. Recognizing news in data is one of the hardest skills for less experienced reporters new to data journalism. This list of potential newsworthy data points is adapted from Paul Bradshaw’s “Data Journalism Heist”.\n\n\n\n\nCompare the claims of powerful people and institutions against facts – the classic investigative approach.\nReport on unexpected highs and lows (of change, or of some other characteristic)\nLook for outliers – individual values that buck a trend seen in the rest\nVerify or bust some myths\nFind signs of distress, happiness or dishonesty or any other emotion.\nUncover new or under-reported long-term trends.\nFind data suggesting your area is the same or different than most others of its kind.\n\nBradshaw also did a recent study of data journalism pieces: “Here are the angles journalists use most often to tell the stories in data”, in Online Journalism Blog. I’m not sure I agree, only because he’s looking mainly at visualizations rather than stories, but they’re worth considering."
  },
  {
    "objectID": "start-math.html",
    "href": "start-math.html",
    "title": "3  Newsroom math",
    "section": "",
    "text": "Jo Craven McGinty, then of The New York Times, used simple rates and ratios to discover that a 6-story brick New Jersey hospital was the most expensive in the nation. In 2012, Bayonne Medical Center “charged the highest amounts in the country for nearly one-quarter of the most common hospital treatments,” the Times story said.\nTo do this story, McGinty only needed to know the number of the procedures reported to the government and the total amount each hospital charged. Dividing those to find an average price, then ranking the most common procedures, led to this surprising result."
  },
  {
    "objectID": "start-math.html#why-numbers",
    "href": "start-math.html#why-numbers",
    "title": "3  Newsroom math",
    "section": "3.1 Why numbers?",
    "text": "3.1 Why numbers?\nUsing averages, percentages and percent change is the bread and butter of data journalism, leading to stories ranging from home price comparisons to school reports and crime trends. It may have been charming at one time for reporters to announce that they didn’t “do” math, but no longer. Instead, it is now an announcement that the reporter can only do some of the job. You will never be able to tackle complicated, in-depth stories without reviewing basic math.\nThe good news is that most of the math and statistics you need in a newsroom isn’t nearly as difficult as high school algebra. You learned it somewhere around the 4th grade. You then had a decade to forget it before deciding you didn’t like math. But mastering this most basic arithmetic again is a requirement in the modern age.\nIn working with typical newsroom math, you will need to learn how to:\n\nOvercome your fear of numbers\nIntegrate numbers into your reporting\nRoutinely compute averages, differences and rates\nSimplify and select the right numbers for your story\n\nWhile this chapter covers general tips, you can find specific instructions for typical newsroom math in this Appendix A, an except from Sarah Cohen’s outstanding book, Numbers in the Newsroom."
  },
  {
    "objectID": "start-math.html#overcoming-your-fear-of-math",
    "href": "start-math.html#overcoming-your-fear-of-math",
    "title": "3  Newsroom math",
    "section": "3.2 Overcoming your fear of math",
    "text": "3.2 Overcoming your fear of math\nWhen we learned to read, we got used to the idea that 26 letters in American English could be assembled into units that we understand without thinking – words, sentences, paragraphs and books. We never got the same comfort level with 10 digits, and neither did our audience.\nIn modern reporting, we’re dealing with huge numbers, in the millions and billions. Think of ways to put these figures into context for everyday people. For example, a million seconds goes by in about 11 days but you may not have been alive for a billion seconds – about 36 years.\nThe easiest way to get used to some numbers is to learn ways to cut them down to size by calculating rates, ratios or percentages. In your analysis, keep an eye out for the simplest accurate way to characterize the numbers you want to use. “Characterize” is the important word here – it’s not usually necessary to be overly precise so long as your story doesn’t hinge on a nuanced reading of small differences.\nHere’s one example of putting huge numbers in perspective. Pay attention to what you really can picture - it’s probably the $21 equivalent.\n\nThe Chicago hedge fund billionaire Kenneth C. Griffin, for example, earns about $68.5 million a month after taxes, according to court filings made by his wife in their divorce. He has given a total of $300,000 to groups backing Republican presidential candidates. That is a huge sum on its face, yet is the equivalent of only $21.17 for a typical American household, according to Congressional Budget Office data on after-tax income.  “Buying Power”, Nicholas Confessore, Sarah Cohen and Karen Yourish, The New York Times, October 2015\n\nOriginally the reporters had written it even more simply, but editors found the facts so unbelievable that they wanted give readers a chance to do the math themselves. That’s reasonable, but here’s an even simpler way to say it: “earned nearly $1 billion after taxes…He has given $300,000 to groups backing candidates, the equivalent of a dinner at Olive Garden for the typical American family , based on Congressional Budget Office income data.” (And yes, the reporter checked the price for an Olive Garden meal at the time for four people.)"
  },
  {
    "objectID": "start-math.html#put-math-in-its-place",
    "href": "start-math.html#put-math-in-its-place",
    "title": "3  Newsroom math",
    "section": "3.3 Put math in its place",
    "text": "3.3 Put math in its place\nFor journalists, numbers – or facts – make up the third leg of a stool supported by human stories or anecdotes , and insightful comment from experts. They serve us in three ways:\n\nAs summaries. Almost by definition, a number counts something, averages something, or otherwise summarizes something. Sometimes, it does a good job, as in the average height of Americans. Sometimes it does a terrible job, as in the average income of Americans. Try to find summaries that accurately characterize the real world.\nAs opinions. Sometimes it’s an opinion derived after years of impartial study. Sometimes it’s an opinion tinged with partisan or selective choices of facts. Use them accordingly.\nAs guesses. Sometimes it’s a good guess, sometimes it’s an off-the-cuff guess. Even when everything is presumably counted many times, it’s still a (very nearly accurate) guess. Yes, the “audits” of presidential election results in several states in 2021 found a handful of errors – not a meaningful number, but a few just the same.\n\nOnce you find the humanity in your numbers, by cutting them down to size and relegating them to their proper role, you’ll find yourself less fearful. You may even find that finding facts on your own is fun."
  },
  {
    "objectID": "start-math.html#going-further",
    "href": "start-math.html#going-further",
    "title": "3  Newsroom math",
    "section": "3.4 Going further",
    "text": "3.4 Going further\n\nTipsheets\n\nSteve Doig’s “Math Crib Sheet”\nAppendix A: Common newsroom math, adapted from drafts of the book Numbers in the Newsroom, by Sarah Cohen.\nA viral Twitter thread:\n\nWhat happens in your head when you do 27+48?--- Gene Belcher (@Wparks91) June 25, 2019"
  },
  {
    "objectID": "xl-intro.html",
    "href": "xl-intro.html",
    "title": "4  Spreadsheets",
    "section": "",
    "text": "Spreadsheets are the gateway drug of data journalism.\nThey are fundamental for organizing data and doing quick calculations. The concepts of sorting, filtering and calculations with spreadsheets are adapted to advanced software. Every data journalist has a solid proficiency in spreadsheets. After readings this material and doing the exercises, you will be on your way too.\nSpreadsheets are great because it’s relatively easy to see what you’re doing and you can easily share your work with your colleagues. In fact, pieces of the Pulitzer-Prize winning COVID-19 coverage from The New York Times was compiled using an elaborate and highly tuned set of Google spreadsheets with dozens of contributors.\nThis guide uses Google Sheets, which allows students to do the exercises regardless of their computer operating system, Mac, Windows or Linux. The exercises can be easily adapted to Microsoft Excel, which can handle larger datasets and has more options for pivot tables and other more advanced functions. However, Google Sheets have their own advanced functions for scraping websites or importing non-tabular file formats like JSON.\nMost of the screen shots and instructions are created with a MacOS Monterey. Some come from earlier Mac versions, but are largely the same now. Windows users should replace any instructions for using the CMD- key with the CTL- key. There is a table that compares keystrokes for Apple desktops, laptops and Windows machines for Excel at the bottom of Spreadsheet Refresher\n\n\nSpreadsheets are used in almost every workplace in America. This section covers most of what you need in the newsroom.\n\nSpreadsheet Refresher : Start over with good habits\nSorting and filtering to find stories : The first step of interviewing data\nGrouping with pivot tables: Aggregating, and the super power of spreadsheets\nSpreadsheet Formulas: Percents, sums, and other basic computations used in newsrooms."
  },
  {
    "objectID": "xl-refresher.html",
    "href": "xl-refresher.html",
    "title": "5  Spreadsheet Refresher",
    "section": "",
    "text": "Spreadsheets are everywhere, so it’s worth re-learning how to use them well. Reporters usually use spreadsheets in three ways:\nThis guide will Google Sheets since the program is available to anyone regardless of operating system. Google Sheets are easy to share for reporting teams.\nSome reporters flinch at typing in 30 or 100 entries into a spreadsheet. You shouldn’t. If you learn to take notes in a structured way, you’ll always be able to find and verify your work. If you try to calculate a sum of 30 numbers on a calculator, you’ll have to type them all in at least twice anyway. Also, getting used to these easy tasks on a spreadsheet keeps your muscles trained for when you need to do more."
  },
  {
    "objectID": "xl-refresher.html#re-learning-excel-from-the-ground-up",
    "href": "xl-refresher.html#re-learning-excel-from-the-ground-up",
    "title": "5  Spreadsheet Refresher",
    "section": "5.1 Re-learning Excel from the ground up",
    "text": "5.1 Re-learning Excel from the ground up\n\nThe spreadsheet grid\n\n\n\nWhen you start up a spreadsheet, you’ll see letters across the top and numbers down the side. If you ever played Battleship, you’ll recognize the idea – every little square, or cell, is referenced by the intersection of its column letter and row number:\nB2 is the cell that is currently active. You can tell because it’s outlined in the sheet and it’s shown on the upper left corner.\n\n\nMouse shapes\n\n\n\n\n\n\n\nThe Copy Tool, or the thin black cross. When you see this, you’ll copy anything that’s selected. This can be good or bad.\n\n\n\nThe Evil Hand. If you use this symbol, you will MOVE the selection to a new location. This is very rarely a good idea or something you intend.\n\n\n\n\n\n\nSelecting cells and ranges\nSpreadsheets act only on the cells or regions you have selected. If you begin typing, you’ll start entering information into the currently selected cell.\nTo select: Hold the cursor over the cell and click ONCE – not twice. Check the formula bar to make sure you’ve selected what you think you’ve got. You can also look at the bottom right of your spreadsheet for more information.\nYou’ll often work with ranges of cells in formulas. These are defined by the corners of the area you want to work on – often a column of information. In the example below, the range is A1:C6, with the “:” referring to the word “through”.\nTo select a group of cells and act on them all at once: Hover the cursor over one corner, click ONCE and drag to the diagonal corner. Make sure the Evil Hand is nowhere to be seen. The entire area will be shaded in except for the currently selected cell. Look at the upper right corner to see how many rows and columns you selected.\n\n\n\n\n\n\n\n\nTo select a column or row : Hover the cursor over the letter at the top of the column. For a row, hover it over the row number in the margin\n\n\nReading the screen\n\nThe areas of the spreadsheet have different visual clues, and learning to read them will make your life much easier.\nThis image shows some key areas on the screen when you’re just viewing the sheet:\n\n\n\nRead the Screen\n\n\nThis is how it changes when you’re editing\n\n\n\nEditing\n\n\n\nEntering data\nSelect the cell and start typing. The information you type won’t be locked into the cell until you hit the Return / Enter key, or move your selection to another cell. Hit “Escape” to cancel the entry.\nYou can’t do a lot of things while you’re editing, so if you have a lot of greyed out menu items, look at your formula bar to see if you are still editing a cell.\nIf you’re having trouble getting to a menu item or seeing the result of your work, try hitting “Escape” and try again. You may not have actually entered the information into the sheet.\n\n\nLocking in headings\nAs your spreadsheet grows vertically with more rows, you’ll want to be able to see the top all the time. When it grows horizontally with more columns, you’ll probably want to see columns in the left, such as names. This is called “Freezing Panes” – you freeze part of the page so it stays in place when you move around.\nSelect View in the menu, then Freeze, then the number of rows to freeze. Select 1 row. As you now scroll down the sheet, your headings will remain but you can see the data as you move deeper into the sheet.\n\n\n\nfreeze panes\n\n\n\n\nFormatting tricks\n\nUse the buttons or the format dialog box to make numbers easier to read.\nIf a column is filled with a lot of text, select Format, then Wrapping from the menu to wrap text. This means that when you double-click to widen a column, it will get taller, not wider. This is good when you need to save valuable real estate on the screen."
  },
  {
    "objectID": "xl-refresher.html#getting-started-with-a-dataset",
    "href": "xl-refresher.html#getting-started-with-a-dataset",
    "title": "5  Spreadsheet Refresher",
    "section": "5.2 Getting started with a dataset",
    "text": "5.2 Getting started with a dataset\nSLOW DOWN! Don’t do anything until you understand what you have in front of you and can predict what your next mouse click will do to it.\nMost data we encounter was created by someone else for some purpose other than ours. This means that you can’t assume anything. It may not be complete. It may be inaccurate. It may mean something completely different than it appears at first blush.\n\nFirst steps\n\nDocument where you got the spreadsheet and how you can get back to the original. Create a new tab (click the + sign in the lower left), name it Data Dictionary, copy the URL of your source data and any other notes about it. Make this your regular practice. It will save time and stress on deadline.\nRead anything you can about what it contains. Look for documentation that comes with the data.\nSave the original into a safe place with its original name and metadata. Work on a copy.\nIf the spreadsheet shows #### instead of words or numbers, widen your columns. If it shows 7E-14 or something like that, format them as numbers, not “General”.\nCheck your corners – look at the top left and bottom right. Is the data all in one area? Are there footnotes or other non-data sections mixed in? We’re going to want to fix that later.\n\n\n\nInterview your data\n\nHeadings\nThe most fraught part of data reporting is understanding what each column actually means. These often have cryptic, bureaucratic names. You may need to go back to the source of the data to be sure you actually understand them.\nIf your data doesn’t have any headings, that’s going to be your first priority. In effect, you’ll need to build what we call a data dictionary or record layout if one hasn’t been provided. Many reporters create these as a page in a dataset.\n\n\nUnit of analysis\nA unit of analysis refers to the items that are listed in the rows of your dataset. Ideally, every row should be at the same unit of analysis – a person, an inspection, or a city, for example. Summaries should be separated by a blank row, or moved to a different sheet. Think of this as the noun you’d use to describe every row.\n\n\nRow numbers\nThe data was probably given to you in some sort of natural sort order. Different computer systems sort differently – some are case-sensitive, others are not. It may depend on when and where the data as created! The order of the data may even depend on a column you don’t have. If you don’t do something now, you’ll never be able to get back to the original order, which could have meaning for both the agency and for fact-checking."
  },
  {
    "objectID": "xl-refresher.html#video-walkthrough",
    "href": "xl-refresher.html#video-walkthrough",
    "title": "5  Spreadsheet Refresher",
    "section": "5.3 Video walkthrough",
    "text": "5.3 Video walkthrough\nThese first steps, along with adding an ID row, are shown here. You can follow along with the same dataset.\n\n\n\n\nGetting started with Google Sheets"
  },
  {
    "objectID": "xl-refresher.html#keyboard-shortcuts",
    "href": "xl-refresher.html#keyboard-shortcuts",
    "title": "5  Spreadsheet Refresher",
    "section": "5.4 Keyboard shortcuts",
    "text": "5.4 Keyboard shortcuts\nGoogle Sheets keyboard shortcuts can be found in the menu: Help, then Keyboard Shortcuts.\n\n\n\nKeyboard shortcuts"
  },
  {
    "objectID": "xl-filter-sort.html",
    "href": "xl-filter-sort.html",
    "title": "6  Sorting and filtering to find stories",
    "section": "",
    "text": "After police in Ferguson, Mo., killed Michael Brown in 2014, advocates and journalists began examining the racial and ethnic gaps between police departments and the communities they served.\nThe New York Times found a 7-year-old survey conducted by the Justice Department that allowed it to compare the data for major cities in a standalone graphic that it published later that year.\nWhen newer data reflecting departments’ makeup in 2012 was released a year later, Matt Apuzzo and Sarah Cohen hoped it would show some differences. It didn’t. So we were left trying to find news in the data that was clearly of public interest.\nCohen matched up the demographics of police departments with their cities and then started sorting, filtering and Googling. Could there be news in the outliers on the list? Which departments most closely represented their communities? Which ones had unusually large gaps?\n\n\n\n\nChief William T. Riley III. Credit: Laura McDermott for The New York Times\n\n\n\nCohen quickly stumbled on telling anecdote to frame the story: Inkster, Mich. had one of the least representative departments in the country, and had recently hired a new police chief to help mend the department’s fraught relationship with its largely African-American community. Where had he come from? Selma, Ala., one of the most representative police departments in the nation. Interviews with the chief, William T. Riley III, suggested one reason for some cities’ disparities: there was no state or federal money to pay for training new police officers.\nThe story, “Police Chiefs, Looking to Diversity Forces, Face Structural Hurdles” helped explain the persistent gap between the makeup of police in some areas and the communities they served."
  },
  {
    "objectID": "xl-filter-sort.html#sorting-and-filtering-as-a-reporting-tool",
    "href": "xl-filter-sort.html#sorting-and-filtering-as-a-reporting-tool",
    "title": "6  Sorting and filtering to find stories",
    "section": "6.2 Sorting and filtering as a reporting tool",
    "text": "6.2 Sorting and filtering as a reporting tool\nSorting and filtering can:\n\nNarrow your focus to specific items that you want to examine in your story.\nShow you rows containing the highest and lowest values of any column. That can be news or it can be errors or other problems with the data.\nLet you answer quick “how many?” questions, with a count of the rows that match your criteria. (In the next lesson, you’ll see that pivot tables, or group-by queries, are much more powerful for this in most cases.)"
  },
  {
    "objectID": "xl-filter-sort.html#example-data",
    "href": "xl-filter-sort.html#example-data",
    "title": "6  Sorting and filtering to find stories",
    "section": "6.3 Example data",
    "text": "6.3 Example data\nData from the Washington Post police shootings database for use in this tutorial - Documentation from the Post’s github site :::\n\nThe data for this and several other chapters is the Washington Post’s public data collection of police shootings in the U.S. It includes the nation’s best guess about each fatal police shooting since 2015. There are a couple of caveats:\nIt excludes deadly police interactions other than shooting a firarem at the suspect. Any strangulation, car crashes, Tasers without guns or other methods are excluded.\nIt is based primarily on news reports and the results public records requests so it often contains the story as told by police. We know that many of those reports are sugar-coated at best, and lies at worst.\nThe Post says this is a list of fatal shootings, but doesn’t say what happens if more than one person is killed. The 2019 shooting of D’Angelo Brown & Megan Rivera in West Memphis is shown as two rows1 in the data even though it was one event. So each row might be considered a shooting “victim”, a “suspect” or a shooting “fatality” rather than a “shooting”.\n\nThe screenshots in this tutorial may not match exactly to what you get on the Washington Post data. This tutorial used data current to Aug. 3, 2022.\nIt’s a good example set for us because it’s been used as the basis of many stories, it has at least one of each data type that we plan to deal with in Google Sheets, and it is well documented on the Post’s github site."
  },
  {
    "objectID": "xl-filter-sort.html#get-the-data-into-google-sheets",
    "href": "xl-filter-sort.html#get-the-data-into-google-sheets",
    "title": "6  Sorting and filtering to find stories",
    "section": "6.4 Get the data into Google Sheets",
    "text": "6.4 Get the data into Google Sheets\n\nDownload the police shooting data from the Washington Post\nOpen Google Sheets. File | Import | Upload | Select the downloaded file “fatal-police-shootings-data.csv” . After it uploads, select the green “Import Data” button."
  },
  {
    "objectID": "xl-filter-sort.html#understanding-data-types",
    "href": "xl-filter-sort.html#understanding-data-types",
    "title": "6  Sorting and filtering to find stories",
    "section": "6.5 Understanding data types",
    "text": "6.5 Understanding data types\nWhen you open the spreadsheet, the first thing to notice is its granularity. Unlike Census or budget spreadsheets, this is a list capturing specific characteristics of each fatality Each column has the same type of data from top to bottom. Those types are:\n\nText. Text or “character” columns can come in long or short form. When they are standardized (the values can contain only one of a small list of values), they’re called “categorical”. If they’re more free-form, they’re might be called “free text”. The computer doesn’t know the difference, but you should. The Post data has examples of both. In spreadsheets, text is left-justified (they move toward the left of the cell and will line up vertically at the beginning)\nNumbers. These are pure numbers with no commas, dollar signs or other embellishments. In Google Sheets, as we’ll see in the computing section, these can be formatted to look like numbers we care about , but underneath they’re just numbers. Adding up a column of numbers that has a word in it or has missing values will just be ignored in Google Sheets. It will trip up most other languages. These are right-justified, so the last digit is always lined up vertically.\nLogical: This is a subset of text. It can take one of only two values – yes or no, true or false. There is no “maybe”.\nDate and times: These are actual dates on the calendar, which have magical properties. Underneath, they are a number. In Google Sheets, that number is the number of days since Jan. 1, 1900.2 They can also have time attached to them, which in Google Sheets is a fraction of a day. What this means is that the number 44,536.5 is really Dec. 6, 2021 at noon. In Google Sheets, you use a format to tell the spreadsheet how you want to see the date or time, just the way you look at dollar values with commas and symbols. (If you get a spreadsheet with a lot of dates of 1/1/1900, it means there is a 0 in that column, which is sometimes a fill-in for “I don’t know.”)\n\nHere’s a picture of a date that is shown in a variety of formats.\n\n\n\ndate formats\n\n\nAll of these are the same, underlying value – the number at the left. Notice that all of these are right-justified.\nThis means that when you see “Friday, December 10”, the computer sees 44540.87431. When you put the dates in order, they won’t be alphabetized with all of the Fridays shown together. Instead, they’ll be arranged by the actual date and time.\nIt also means that you can compute 911 response times even when it crosses midnight, or or compute the someone’s age today given a date of birth. Keeping actual calendar dates in your data will give it much more power than just having the words. (Google Sheets uses the 1st of the month as a stand-in for an actual date when all you know is the month and year.)\n\n6.5.1 Sorting rows\nSorting means rearranging the rows of a data table into a different order. Some reporters take a conceptual shortcut and call this “sorting columns”. That thinking will only get you into trouble – it lets you forget that you want to keep the rows in tact while changing the order in which you see them. In fact, in other languages it’s called “order by” or “arrange” by one or more columns – a much clearer way to think of it.\nIn Google Sheets, look for the sort options under the Data tab at the top of your screen. In this case, sorting from oldest to newest gives you a list of the fatalities in chronological order, including the time of day.\nTo sort your data:\n\nMake a copy of your data. Left click on the “fatal-police-shootings-data” tab, select Duplicate\nSelect your data by clicking the box above Row 1 and to the left of Column A\nSelect Data | Sort Range | Advanced Range Sorting Options\nClick “Data has header row” and then select date from the Sort by dialog box. Select Z –> A\nSelect Sort\n\n\n\n\nAdding fields to the sort\nAdding more columns to the sort box tells Google Sheets what to do when the first one is the same or tied. For example, sorting first by state then by date gives you a list that shows all of the events by state in sequence:\n\n\n\n\n6.5.2 Filtering\nFiltering means picking out only some of the rows you want to see based on a criteria you select in a column. Think of it as casting a fishing net – the more filters you add, the fewer fish will be caught.\nTo activate filters in Google Sheets, from the Menu:\n\nData | Filter Views | Create a New Filter View\nYou’ll see little triangles next to the column headings.\n\nClick the “armed” heading. You will see options for various weapons. All are selected by default with a check mark. To select just “ax”, click on clear and then select “ax.” The sheet how is filtered to just weapons using an ax. To remove the filter, repeat the steps and “select all” and the entire sheet is displayed again.\nEach filter you select adds more conditions, narrowing your net.\nTo find fatalities that involved a firearm with a Taser, use the drop-down menu under manner_of_death select “shot and Tasered”.\n\n\n\n\n\nThis method works for small-ish and simple-ish columns. If your column has more than 10,000 different entries, such as names or addresses, only the first 10,000 will be considered. We only caught these for stories when someone did a fact-check using a different method of filtering. If your column has a lot of distinct entries, use option that says “Choose One”, and then use the “Contains” option. Better yet, don’t use filtering for counting things at all.\nAdd more filters to narrow down your list of cases even more. For example, the New York Times ran a series of stories in 2021 about unarmed people shot by police. One story was about those who were fleeing by car. Here’s one way to get a preliminary list of those cases:\n\nRemove any filter you already have on.\nTurn on the filters again if you turned them off.\nChoose “unarmed” under armed and “car” under flee.\n\n(Of course, the Times didn’t stop there in trying to find more cases and teasing out more of them from this and other data. But this is a start. )\n\n\n\n\n\n\nDifferent kinds of filters\nThere are several filter options. You can filter by various conditions. For numerical data, you can set a minimum or maximum value or a range of values. This is useful for dates to specify a certain time period. For text, you can filter if a word contains a few letters, useful to capture spelling variations."
  },
  {
    "objectID": "xl-formulas.html",
    "href": "xl-formulas.html",
    "title": "7  Spreadsheet Formulas",
    "section": "",
    "text": "The quick review of math in Google Sheets uses the City of Baltimore’s 2022 budget, compared with previous years.\nYou should get into the habit of creating unique identifiers, checking your corners and looking for documentation before you ever start working with a spreadsheet. These habits were covered in replication and the data diary and on an Excel refresher."
  },
  {
    "objectID": "xl-formulas.html#formulas-in-spreadsheets",
    "href": "xl-formulas.html#formulas-in-spreadsheets",
    "title": "7  Spreadsheet Formulas",
    "section": "7.1 Formulas in spreadsheets",
    "text": "7.1 Formulas in spreadsheets\nEvery formula begins with the equals sign (=). Rather than the values you want to work with in the formula, you’ll use references to other cells in the sheet.\nThe easiest formulas are simple arithmetic: adding, subtracting, multiplying and dividing two or more cells. You’ll just use simple operators to do this:\n\n\n\noperator\nsymbol\nexample\n\n\n\n\naddition\n+\n=A2+B2\n\n\nsubtraction\n-\n=A2-B2\n\n\nmultiplication\n*\n=A2*B2\n\n\ndivision\n/\n=A2/B2\n\n\n\nHere’s what a spreadsheet looks like while editing some simple arithmetic:\n\n\n\nformula\n\n\nThe other kind of formula is a function. A function is a command that has a name, and requires arguments – usually the cell addresses or the range of addresses that it will act on. Every programming language has functions built in and many have extensions, or packages or libraries, that add even more as users find things they want to do more efficiently. You begin using a function the same way you begin a formula – with an = sign. Here are three common functions that create summary statistics for the numbers contained in a range of addresses. A range is a set of cells defined by its corner cell address: the top left through the bottom right.\nYou’ll usually use them on a single column at a time.\n\n\n\n\n\n\n\nFormula\nWhat it does\n\n\n\n\n=SUM(start:finish)\nAdds up the numbers between start and finish\n\n\n=AVERAGE(start:finish)\nComputes the mean of the numbers\n\n\n=MEDIAN(start:finish)\nDerives the median of the numbers\n\n\n\n…where “start” means the first cell you want to include, and finish means the last cell. Use the cell address of the first number you want to include , a colon, then the cell address of the last number you want to include. You can also select them while you’re editing the formula.\nHere’s an example of adding up all of the rows in a list by county:\n\n\n\nformula"
  },
  {
    "objectID": "xl-formulas.html#common-spreadsheet-arithmetic",
    "href": "xl-formulas.html#common-spreadsheet-arithmetic",
    "title": "7  Spreadsheet Formulas",
    "section": "7.2 Common spreadsheet arithmetic",
    "text": "7.2 Common spreadsheet arithmetic\nThe budget document shows three years’ of data: The actual spending in the fiscal year that ended in 2016; the spending that was estimated for the end of fiscal year 2017; and the proposed spending for fiscal year 2018. The first page of the document shows these amounts for broad spending categories.\nYou may want to widen the columns and format the numbers before you start:\n\n\n\n\n\n\n7.2.1 Check the government’s math with SUM\nOur first job is to make sure the government has provided us data that adds up. To do that, we’ll SUM all of the departments’ spending.\nTo add up the numbers from FY 2020 Actual, enter the following formula in cell C16, just below the number provided by the government:\n  =SUM(C2:C13)\n  and hit the enter key\nCopy that formula to the right. Notice how the formula changes the addresses that it is using as you move to the right – it’s adjusted them to refer to the current column.\n\n\n\n\n\n\n\n7.2.2 Change in spending\nThe increase or decrease in projected spending from 2017 to 2018 is just the difference between the two values, beginning in cell F3\n  new-old, or  =E2-D2\nWhen you copy it down, note how the references to each row also adjusted. In line 3, it’s E3-D3, and so on. Excel and other spreadsheets assume that, most of the time, you want these kinds of adjustments to be made.\n\n\n\n\n\n\n\n7.2.3 Percent change\nWe can’t tell the rate of growth for each department until we calculate the percent change from one year to another. Now that we already have the change, the percent change is easy. The formula is:\n  ( new - old ) / old\n\n  .. or just scream \"NOO\"\nThe new-old is already in column F, so all that’s left is to divide again. In grade school, you also had to move the decimal place over two spots, since the concept of percent change is “out of 100”. Excel formats will do that for you.\nRemember, it’s always (new-old)/old , NOT the big one minus the little one. Doing it correctly, the answer could be negative, meaning the value fell.\n\n\n\nformula\n\n\nWhen you’re done, you can format the answer as a percentage to get it into whole numbers.\nIt’s also worth comparing the picture you get by looking at raw numbers vs. percentages. It’s instructive that federal grants are up 308%.\n\n\n7.2.4 Parts of a whole: percent of total\nWe’d also like to know what portion of the total spending is eaten up by each department. To do that, we need the percent of total.\nIn our case, let’s use the total that the government gave us. In practice, you’d have to decide what to do if your figures didn’t match those provided by officials. You can’t assume that the total is wrong – you could be missing a category, or there could be a mistake in one of the line items.\nThe formula for percent of total is:\n  category / total\nHere’s a good trick with spreadsheets when you need to divide against a fixed total. You don’t have to type in each formula one by one, though. Instead, you’ll use anchors, known in spreadsheets as “absolute references”. Think of a dollar sign as an anchor or stickpin, holding down the location of part of your formula. If you put the stickpin before the letter in the formula, it holds the column in place. If you put it before the number, it holds the row in place. If you put it in both places, it holds the cell in place.\nIn this case, we want to see what percentage property taxes, income taxes, etc. are of the total revenues in FY22, which is $4,331,049,486 (cell E14). Let’s figure it out.\n\nLeft click column F, insert column to the left. Name it Pct of Total\nCreate formula to divide property taxes into total revenues: =(E2/E14)\nModify forumula so it will anchor to the E14 as you move down the spreadsheet =(E2/$E$14)\nCopy formula down to F13"
  },
  {
    "objectID": "xl-formulas.html#while-were-at-it-two-kinds-of-averages",
    "href": "xl-formulas.html#while-were-at-it-two-kinds-of-averages",
    "title": "7  Spreadsheet Formulas",
    "section": "7.3 While we’re at it: two kinds of averages",
    "text": "7.3 While we’re at it: two kinds of averages\nAlthough it doesn’t make a lot of sense in this context, we’ll go ahead and calculate the average or mean size of each department, and then calculate the median size.\nSimple average, or mean\nA simple average, also known as the mean, is skewed toward very high or very low values. Its formula is\n    sum of pieces / # of pieces that were summed\nBut in Google Sheets, all we need is the word AVERAGE:\n    =AVERAGE(C2:C9)\nMedian\nIn Google Sheets, you can get the median of a list of numbers by just using the formula, MEDIAN()\n  = MEDIAN(C2:C9)\nDoing simple calclutions like this on data that is provided to you by the government lets you ask better questions when you get an interview, and may even convince officials to talk with you. There’s a big difference between asking them to tell you what the budget numbers are, and asking them to explain specific results!"
  },
  {
    "objectID": "xl-formulas.html#faqs",
    "href": "xl-formulas.html#faqs",
    "title": "7  Spreadsheet Formulas",
    "section": "7.4 FAQs",
    "text": "7.4 FAQs\n\nShould I use average or median?\nIt depends. Averages are easier to explain but can be misleading. Usually, if they’re very different, median will be a better representation of the typical person, city or department. Averages in these cases are more like totals.\n\n\nMy percents are small numbers with decimal points\nUse the format as a % button to move the decimal point over two places and insert the percentage symbol."
  },
  {
    "objectID": "xl-pivot.html",
    "href": "xl-pivot.html",
    "title": "8  Grouping with pivot tables",
    "section": "",
    "text": "In the wake of a police shooting in 2016, reporter Mitch Smith obtained a list of traffic stops from the St. Anthony Police Department in Minnesota. He was writing a story on Philandro Castile’s death and was running out of time. He wanted to answer a simple question: Were minority motorists more likely to be stopped in St. Anthony than whites?\nRob Gebeloff made a quick pivot table to answer the question. That night, Smith wrote:\nSummarizing a list of items in a spreadsheet is done using pivot tables. In other languages, it’s considered “aggregating” or “grouping and summarizing”. Think of pivot tables and grouping as answering the questions, “How many?” and “How much?” They are particularly powerful when your question also has the words “the most” or the “the least” or “of each”. Some examples:"
  },
  {
    "objectID": "xl-pivot.html#tutorial",
    "href": "xl-pivot.html#tutorial",
    "title": "8  Grouping with pivot tables",
    "section": "8.1 Tutorial",
    "text": "8.1 Tutorial\n\nWe will continue to use data from the Washington Post police shootings database for this tutorial.\n\nFirst, let’s modify this spreadsheet to include the descriptions of race and ethnicities: A for Asian, B for Black, etc.\n\nSelect Column I, city, and insert a new column to the left. Name it race_ethicity\nCreate a filter. Select race, filter for A\nType Asian in Column I. Copy Asian down the entire column so every A in column H corresponds with Asian in Column I\nRepeat: B = Black. H = Hispanic. W = White, non-Hispanic, N= Native American, O=Other, blanks=Unknown.\n\nFollow this video to see the process.\n\n\n\nSetting up the pivot table\nFrom the main menu on Google Sheets, choose Insert, then Pivot table, then New sheet.\n\n\n\ninsert menu\n\n\nNext, you will see the Pivot Table editor. Here’s what it looks like:\n\n\n\npivot menu\n\n\n\n\nCounting , or “how many”?\nFor Rows, select Add and then race_ethnicity. For values, select Add and then state. You will now see all of the race and ethnicity totaled.\nWe’re totalling on state because it’s good to have something that’s always filled out into the Values area (state is a safe one in this data).\n\n\n\nPercents of total\nIt’s hard to compare raw numbers unless they’re really small. Instead, we’d like to know what percent of fatalities by ethnicity. To get a “Percent of Column total”, do the following:\n\nAdd a second values, select state\nUnder Show as, select “% of grand total”\n\n\n\n\nMore variables\nSuppose you’d like to see the number of fatalities by year, with the years across the top and the ethnicity down the sides. Add a year variable to columns\n\nRemove the percent of total column\nSelect Columns, then year\n\n\n\n\nEven more variables\nSay you wanted to see each city’s total shootings by year. Which one had the most last year, and which one had the most overall?\nThis is actually really hard in a pivot table, because there are cities with the same names in different states. It means you’d need to have a pivot table with TWO columns down the side, and one across the top. Here’s an attempt at solving the problems:\n\nFirst, Rows, add state\nRows, add city\nValues, add state, CountA is the default\nColumns, add year\n\n\n\n\nMore Variables!\n\n\nThe problems is we can’t sort by the combination of city and state. But it does help answer the question on some level."
  },
  {
    "objectID": "xl-pivot.html#faq",
    "href": "xl-pivot.html#faq",
    "title": "8  Grouping with pivot tables",
    "section": "8.2 FAQ",
    "text": "8.2 FAQ\n\nI have too many columns\nIf you want two sets of statistics – say, number of fatalities and percent of fatalities – across the top, it can get very wide and confusing very quickly. One alternative is to change it into more of a vertical rectangle by dragging the “Values” element from the columns to the rows on the right. (This only shows up when you have two calculations being made.)\n\n\nI want to sort by percents, not numbers\nYou can’t.\n\n\nThings aren’t adding up\nYou have to be super careful about which column you use to Count things – it has to always be filled out (there can’t be any blanks). Go through the filters and find one that doesnt have (Blanks) at the bottom to be sure.\n\n\nIts a crazy number!\nYou might have dragged a numeric column into the “Values” area. Check to see if it says “Count” or “Sum”. Change it to “Count” if it has something else on it, unless you wanted to add up that column.\n\n\nThis is so frustrating - I can’t get what I want\nRight? It’s time to go to a programming language!"
  },
  {
    "objectID": "xl-sheets_cleaning.html",
    "href": "xl-sheets_cleaning.html",
    "title": "9  Cleaning data with Google Sheets",
    "section": "",
    "text": "We will use a version of the Washington Post police shooting data to conduct these exercises.\nMake a copy of your data before cleaning!\n\n9.0.1 Text to columns\nWe want to split up the date field into day, month and year. Currently, the format is 2015-01-02. Luckily, the fields all share a common separator, a hyphen, and we can ask Google Sheets to split all according to the hyphen. Other common separators are commas and spaces.\nFirst steps when modifying data: make a backup copy! - Left click on the tab “Police Shootings to Clean” - Select duplicate - Rename “Copy of Police Shootings to Clean” to “Original Police Shootings to Clean.” Do not touch this version.\nTime to split text to columns. I am extra paranoid (for good reason) and so I always duplicate a date field before modifying it. Duplicate the date column (click on Column C, left click, copy, then Insert column to left, select new blank Column C and paste), save the copy as date-original.\n\nSelect date column\nSelect Data | Split text to columns\nSee a dialog box: Separator. Select Custom and type in a dash - and enter. You now have the date field chopped up to year, month and day. Rename column E for month and column f for day.\n\n\n\n\n\n\n\n\n9.0.2 Normalizing\nScroll down the race_ethnicity column and you will see a number of different categories for the same thing: white, White, non Hispanic and Black, African Am. To see all the variations of categorical variables, create a filter and check the different variables\nThis presents a big problem when you are trying to group and summarize based on these variable names. See this chart\nWe see white totals 44 and White, non Hispanic total 3,136. We want those to be together – the total is 3,180 – because they are the same thing. Also note that African Am totals 29 and Black totals 1,645, and we would want to combine those as well.\nLet’s fix it!\nBefore changing any data, let’s work with a copy of the column. - Select race_ethnicity (Column k), left click, copy - Left click on Column K, insert column to right, paste - Rename as race_ethnicity2\nRenaming variables. We will rename all “white” as “White, non Hispanic” - Filter race_ethnicity (Column K) to white - in race_ethnicity2, write “White, non Hispanic” in the first column and copy down the list\nSee how this process works\n\n\n\n\n\n\n\n9.0.3 Lowercase or Uppercase character conversion\nCreate a filter and notice two variations on Native American: NativeAm and nativeam. You can resolve these differences easily by converting all to Upper or Lower case text using the =UPPER or =LOWER functions.\n\nTo convert NativeAm to lower case, filter on race_ethnicity (Column K) for NativeAm.\nIn race_ethnicity2 (Column L), insert a blank column, and type the function =LOWER(K67) and hit enter.\n\nThe result should be nativeam as the first entry in race_ethnicity2.\nSee this example\n\n\n9.0.4 White space\nOne obnoxious feature of spreadsheet data is the invisible “white space” or hidden character or carriage returns that can impede your ability to group and summarize variables. Look at the age column. See how some numbers are flush left while most are flush right. The flush left data has hidden white space. You can fix this by clicking on individual cells and deleting the space around the number or you can do it with a function.\n\nSelect age (Column H), left click on Column H, insert column to right, rename as age2\nIn cell I2, type =TRIM(H2) and enter. Copy the formula down.\n\nNote how all of the values have been normalized.\nThese are some of the basic go-to tools for data cleaning in Google Sheets, which can be adapted to Excel, R and other programming languages."
  },
  {
    "objectID": "r-start.html",
    "href": "r-start.html",
    "title": "10  Getting started with R and RStudio",
    "section": "",
    "text": "In this chapter\n\n\nInstall R , RStudio\nThe power of packages, especially the tidyverse\nSet up defaults for reporting with data\nIssue your first R commands\nWork in projects\nRelax!\nThis is probably your first introduction to coding. Don’t be worried. With effort, much of what reporters do in coding can be learned in a few weeks.\nLike most reporters, I learned the coding that I know (which isn’t a lot) because I wanted to get a story done. In our class, we are not trying to become a programmer or social scientist. We’re working on stories.\nYou saw during the pivot table lesson that spreadsheets have limits. We couldn’t easily get the city with the most police shootings because we would have had to put both city and state into the pivot table. A median is missing from pivot tables entirely. It’s easy to lose track of where you are and what you did. That’s the reason to learn some coding – there is something we want to know that isn’t very easy to get in other ways.\nAll programming languages have one thing in common: You write instructions, called algorithms, and the program executes your statements in order. It means you can do more complicated work in computer programming than in point-and-click parts of Excel. It can also scale – you can repeat your instructions millions of times, tweak it a little, and re-run the program without messing anything else up. The computer won’t mind. Really.\nWriting code can also be self-documenting. You can largely eliminate those painstaking Excel data diaries and replace them with documents that explain your work as you go. You’ll still need to record information about your interviews and decisions, but you’ll no longer have to write down every mouse click.\nIf you’re nervous about getting started with programming, take look at the Appendix: A gentle introduction to programming and Jesse Lecy’s “Learning how to Learn.”"
  },
  {
    "objectID": "r-start.html#install-r-and-rstudio",
    "href": "r-start.html#install-r-and-rstudio",
    "title": "10  Getting started with R and RStudio",
    "section": "10.1 Install R and RStudio",
    "text": "10.1 Install R and RStudio\n\nR is the programming language itself, and has to be installed first\nRStudio is a software program that makes it easier to interact with the programming language. Install it second.\nPackages are sets of programs written by volunteers and data scientists that perform specialized jobs more easily that working with the “base” R language. A package must be installed once on your computer, then invoked to use them in a program.\n\n\nFollow this interactive tutorial on installing R, RStudio and the tidyverse on your computer:\nhttps://learnr-examples.shinyapps.io/ex-setup-r/#section-welcome .\n\nThere are two differences between the video and today:\n\nThe tidyverse will take much longer to finish installation. It has a lot to do and often looks like it’s stalled.\nThere are two versions of R for Mac users: The traditional one and the one for the new M1 or M2 chip on the latest machines. Choose the one that matches your machine by checking the apple in the upper left and looking at “About this Mac”. It will say “Apple M1” or “Apple M2” as the processor if you have it."
  },
  {
    "objectID": "r-start.html#unlocking-packages-and-the-tidyverse",
    "href": "r-start.html#unlocking-packages-and-the-tidyverse",
    "title": "10  Getting started with R and RStudio",
    "section": "10.2 Unlocking packages and the tidyverse",
    "text": "10.2 Unlocking packages and the tidyverse\nThe real power of R comes with packages. Packages are bundles of programs that others have found useful to extend the base R language. R is almost useless without them. There are more than 10,000 packages available for R, each doing a special job.\nIf you followed along with the tutorial, the last thing you did was install a “package” called the tidyverse. Almost everything we do from now on depends on that step.\nThe tidyverse packages up a whole set of other packages that are designed to work together smoothly with similar grammar and syntax. It’s particularly useful for the kind of work reporters do – importing, cleaning and analyzing data that we get from others and can’t control how it’s structured.\nWe’ll be working almost exclusively within the tidyverse in this course. I strongly suggest that when you Google for help, put the word “tidyverse” somewhere in your query. Otherwise, you may get answers that look inscrutable and unfamiliar.\nThe tidyverse is the brainchild of Hadley Wickham, a statistician from New Zealand, who famously identified tidy data principles. He’s currently the chief data scientist for RStudio in Houston."
  },
  {
    "objectID": "r-start.html#set-up-rstudio-for-data-reporting",
    "href": "r-start.html#set-up-rstudio-for-data-reporting",
    "title": "10  Getting started with R and RStudio",
    "section": "10.3 Set up RStudio for data reporting",
    "text": "10.3 Set up RStudio for data reporting\nStaying organized is one of the challenges of data reporting – you’re constantly re-downloading and re-jiggering your analysis and it’s easy to get your material separated. This setup helps ensure that you always know where to find your work and can move it to another comptuer seamlessly.\nBefore you start, decide on a folder you’ll use to store all of your R work. Within my Documents folder, I created a sub-folder called data-class. It will make this guide a little easier if you do the same thing, especially if you’re not very familiar with using directories and folders.\n\n\n\nStart up RStudio once you’ve made your folder. Make sure you start up RStudio (not the R language) by searching for it in Spotlight or in the Search bar in Windows. Here’s what they look like:\n\nGet to the Preferences (under the RStudio menu item on a Mac) and make sure it looks like this in the General tab:\n\n\n\nsee below\n\n\n\n(I’ve turned OFF all of the options to restore anything when you start up RStudio and set up a default working directory by browsing to the one I just created.)\nUnder the R Markdown options, make sure that the box called “Execute setup chunk automatically” is checked."
  },
  {
    "objectID": "r-start.html#the-screen",
    "href": "r-start.html#the-screen",
    "title": "10  Getting started with R and RStudio",
    "section": "10.4 The screen",
    "text": "10.4 The screen\nThis is what your screen probably looks like:\n\n\n\nconsole\n\n\n\nThe Console\nThe Console is where you can type commands and interact directly with the programming language. Think of it as a very powerful calculator at first. One reason to use it is to install packages.\nIf you followed the installation demo, you’ve already used the console to install one package. (Go back and do that part now if you skipped it.) Install a few more that will be useful in this course.\n\nCopy these commands one a a time, and paste them into the Console, then hit Return/Enter to execute the command.\n   install.packages(\"janitor\")\n   install.packages(\"rmarkdown\")\n   install.packages(\"skimr\")\n   install.packages(\"swirl\")\n\nThese package names should all be in quotes. We’ll be installing other packages later in this guide, but for now that is everything you need.\n\n\nFiles tab\nWe won’t be using many of the tabs in the lower right, but the Files tab can help you if you’re having trouble navigating your work. Under the More button, you can choose “Go to working directory”, since that’s where R thinks you’ve parked all of your work. This can be confusing in R, which is why we’ll be working in “projects” that bundle up all of your work in one place.\n\n\nEnvironment\nThe upper right screen is the Environment, which is where your active variables live. A variable is a named thing. It might be a word, a list of words or numbers, or a data frame (spreadsheet). Anything that you want to use has to be listed in that environment before you can reference it. This will make more sense later.\n\n\nTyping into the console\nWhen you type this: 5+5 after the > prompt, you’ll get this back after you press Return/Enter: [1] 10\nWhen you type this: \"Merrill\" (with quotes) after the > prompt, you’ll get this back: [1] \"Merrill\"\nTo create a new variable, you’ll use the assignment operator <- (two characters : A less than sign and a hyphen). Here is how I would create the variable called my_name (lower case, no spaces). Notice how it appears in the Environment after being created. Then I can print it by typing the name of the variable instead of the letters of my name in quotes:\n\n\n\n\n\nThe console remembers your commands, but you have to type them one at a time and it will forget them when you leave for the day. That’s why we’re going to work in programs called R Markdown documents most of the time."
  },
  {
    "objectID": "r-start.html#working-directory",
    "href": "r-start.html#working-directory",
    "title": "10  Getting started with R and RStudio",
    "section": "10.5 Working directory",
    "text": "10.5 Working directory\nHere’s how to set your working directory so you can keep your files organized. First, you should have created a folder within the Documents folder called data_class. Run the following command to see if R Studio is pointing to that folder\n\ngetwd()\n\n[1] \"/Users/robwells/Code/CompText_Jour/03_tutorials/qmd_files\"\n\n\nIf it is not, you can navigate R Studio to that folder using the Files tab in the lower right corner window. Once you find your data_class folder, then select the Set Working Directory option under the More menu.\nYou can also set the path programmatically using setwd() which means set working directory. Just find the path directory using Finder – directions are here – and copy that link to this command.\n\nsetwd(\"/Users/YOURNAME/Documents/data_class\")"
  },
  {
    "objectID": "r-start.html#interactive-r-tutorial",
    "href": "r-start.html#interactive-r-tutorial",
    "title": "10  Getting started with R and RStudio",
    "section": "10.6 Interactive R tutorial",
    "text": "10.6 Interactive R tutorial\nOne of the packages you installed earler was called swirl. Invoke it now by typing library(swirl) into the Console. You can follow the instructions from there. Don’t bother going beyond the first chapter – it’s more geared at other kinds of jobs than ours.\n\n\n\nRelax by Silwia Bartyzel via Unsplash"
  },
  {
    "objectID": "r-start.html#relax",
    "href": "r-start.html#relax",
    "title": "10  Getting started with R and RStudio",
    "section": "10.7 Relax!",
    "text": "10.7 Relax!\nYou’re all set up and we’re ready to start programming. Congratulate yourself - everything is new, nothing is intuitive and the screen is intimidating. You’ve come a long way."
  },
  {
    "objectID": "r-start.html#other-resources",
    "href": "r-start.html#other-resources",
    "title": "10  Getting started with R and RStudio",
    "section": "10.8 Other resources",
    "text": "10.8 Other resources\nSharon Machlis’ Practical R for Mass Communications and Journalism has an intro to R and RStudio in chapters 2.3 through 2.6\nBen Stenhaug created a fast-paced video introducing the RStudio interface. Don’t worry too much about what some of it means just yet – just see if you can get used to the different parts of the screen."
  },
  {
    "objectID": "r-load-analyze-visualize.html",
    "href": "r-load-analyze-visualize.html",
    "title": "11  Loading and Analyzing Data",
    "section": "",
    "text": "You will be executing commands in this document that are contained in “chunks,” which are separate from the text and contain live R code. Click the green arrow at the right on line 6 and run the help.start() command\n\nhelp.start()\n\nstarting httpd help server ... done\n\n\nIf the browser launched by '/usr/bin/open' is already running, it is\n    *not* restarted, and you must switch to its window.\nOtherwise, be patient ...\n\n\n  In the bottom right window of R Studio, you will see a Help window that displays basic help commands for the program.\n\n11.0.1 Install software to grab data\nTidyverse: Eight separate software packages to perform\ndata import, tidying, manipulation, visualisation, and            programming\n\nRio: Easy importing features \nJanitor: Data cleaning\nYou should have installed tidyverse already. If not, then delete the hashtag in front of install.packages(“tidyverse”) and run the code chunk at line 22.\n\noptions(repos = \"https://cloud.r-project.org\") \ninstall.packages(\"tidyverse\")\n\n\nThe downloaded binary packages are in\n    /var/folders/4j/5v_ymx217295nl9fk7hw_zp80000gn/T//RtmpmQyINg/downloaded_packages\n\ninstall.packages(\"rio\")\n\n\n  There is a binary version available but the source version is later:\n    binary source needs_compilation\nrio  1.1.0  1.2.2             FALSE\n\n\ninstalling the source package 'rio'\n\ninstall.packages(\"janitor\")\n\n\nThe downloaded binary packages are in\n    /var/folders/4j/5v_ymx217295nl9fk7hw_zp80000gn/T//RtmpmQyINg/downloaded_packages\n\n\nRemember, package installation usually is a one-time thing on your hard drive. But when you need to load the software libraries each time you start a script. Libraries are bits of software you will have to load each time into R to make things run.\n\nlibrary(tidyverse)\nlibrary(rio)\nlibrary(janitor)\n\nCheck to see what’s installed by clicking on “Packages” tab in File Manager, lower right pane \n\n\n11.0.2 Data\nWe will work with a dataset of MediaSalaries that I cleaned and modified slightly for this tutorial. Some of the detail has been removed so we can make calculations. This MediaSalaries sheet was a crowdsourced project involving reporters worldwide to share information about salaries and benefits. Open this file in Google Sheets\n1) Select Salaries tab\n\nIRE Old School: Four Corners Test!\n13 Columns\n1658 Rows\n\nNumberic data in Salary, Years Experience\nMixed string data in Gender Identity / Ethnicity, Job duties\n \n\n\n11.0.3 Import Data\nWe'll now load this data into R. You can load spreadsheets from the Internet as follows:\n\nMediaBucks <- rio::import(\"https://docs.google.com/spreadsheets/d/1jkbQFwIdaWv8K00Ad6Wq7ZxFTUPFQA-g/edit#gid=1655992481\", which = \"RealMediaSalaries2\")\n\n What happened? Look at the table\n\nhead(MediaBucks)\n\n            TITLE                    COMPANY Salary Salary_Details\n1 Photojournalist  College Student Newspaper   0.00               \n2    Staff Writer               Paxton Media  12.00           hour\n3  Staff reporter Schurz Communications Inc.  12.00           hour\n4        Reporter          Hearst Newspapers  13.25           hour\n5  Staff Reporter           Ogden Newspapers  14.91           hour\n6   Desk Assitant                       KTLA  15.00           hour\n  Salary_Details2     Race Gender    YEARS_EXPERIENCE         LOCATION\n1                    asian   male                   3                 \n2          anhour    white female                   8          Georgia\n3           -2012    white female                   2 Central Kentucky\n4    ~32,000/year    white female                   3          Houston\n5         perhour    white   male 3+ years experience             Utah\n6                 noanswer female                   2      Los Angeles\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    JOB_DUTIES\nhoto\n2                                                                                                                                                                                                                                                                                                                                                                                                                                                          Write and cover news stories, photograph news, write monthly health magazine, social media director\n3                                                                                                                                                                                                                                                                                                                                                                       Reported on anything and everything: local government, breaking news, features, op/eds, columns. Took pictures, managed web uploads and social media accounts, produced short videos. \n4                                                                                                                                                                                                                                                                                                                                                                                                                             Report on communities outside of the Houston metro area, take photos, produce online and print content, pitch story ideas, etc. \n5                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   daily beat reporting, photos, social media\n6 Organize daily field drives and retrieves file videos\\nUse FTP system to send/receive video files from the field\\nMakes beat checks of police and fire departments\\nLog/transcribe daily video feeds\\nAnswers viewer phone calls, taking stories from viewers\\nChecks for possible stories via all social media channels\\nChecks email for possible stories and upcoming news events\\nListens to viewers complaints; accepts criticism in an even handed manner; and offers suggestions or answers as appropriate\\nWatch and log daily competition newscasts\n  PREV_SALARIES_TITLES           SALARY_original Gender_Ethnicity_Original\n1                                              0            Cis male asian\n2                                    $12 an hour              White female\n3                                $12/hour (2012)          cis white female\n4                      13.25/hour ~ 32,000/year           Cis white female\n5                                $14.91 per hour            cis white male\n6                                       $15/hour                cis female\n\n\nWhat happened?\nR grabbed the spreadsheet from the folder\nWe told R to grab the first sheet, RealMediaSalaries2\nR created a dataframe called MediaBucks\nbasics of R: <- is known as an “assignment operator.”\nIt means: “Make the object named to the left equal to the output of the code to the right.”\n \n\n\n11.0.4 Explore Data\nClick the green arrow code chunk to get the answers below.\nHow many rows?\n\nnrow(MediaBucks)\n\n[1] 1658\n\n\nHow many columns?\n\nncol(MediaBucks)\n\n[1] 13\n\n\nDimensions: Gives number rows, then columns\n\ndim(MediaBucks)\n\n[1] 1658   13\n\n\nNames of your columns\n\ncolnames(MediaBucks)\n\n [1] \"TITLE\"                     \"COMPANY\"                  \n [3] \"Salary\"                    \"Salary_Details\"           \n [5] \"Salary_Details2\"           \"Race\"                     \n [7] \"Gender\"                    \"YEARS_EXPERIENCE\"         \n [9] \"LOCATION\"                  \"JOB_DUTIES\"               \n[11] \"PREV_SALARIES_TITLES\"      \"SALARY_original\"          \n[13] \"Gender_Ethnicity_Original\"\n\n\nOR\n\nnames(MediaBucks)\n\n [1] \"TITLE\"                     \"COMPANY\"                  \n [3] \"Salary\"                    \"Salary_Details\"           \n [5] \"Salary_Details2\"           \"Race\"                     \n [7] \"Gender\"                    \"YEARS_EXPERIENCE\"         \n [9] \"LOCATION\"                  \"JOB_DUTIES\"               \n[11] \"PREV_SALARIES_TITLES\"      \"SALARY_original\"          \n[13] \"Gender_Ethnicity_Original\"\n\n\nCheck data types\n\nstr(MediaBucks)\n\n'data.frame':   1658 obs. of  13 variables:\n $ TITLE                    : chr  \"Photojournalist\" \"Staff Writer\" \"Staff reporter\" \"Reporter\" ...\n $ COMPANY                  : chr  \"College Student Newspaper\" \"Paxton Media\" \"Schurz Communications Inc.\" \"Hearst Newspapers\" ...\n $ Salary                   : num  0 12 12 13.2 14.9 ...\n $ Salary_Details           : chr  \"\" \"hour\" \"hour\" \"hour\" ...\n $ Salary_Details2          : chr  \"\" \"anhour\" \"-2012\" \"~32,000/year\" ...\n $ Race                     : chr  \"asian\" \"white\" \"white\" \"white\" ...\n $ Gender                   : chr  \"male\" \"female\" \"female\" \"female\" ...\n $ YEARS_EXPERIENCE         : chr  \"3\" \"8\" \"2\" \"3\" ...\n $ LOCATION                 : chr  \"\" \"Georgia\" \"Central Kentucky\" \"Houston\" ...\n $ JOB_DUTIES               : chr  \"Photo\" \"Write and cover news stories, photograph news, write monthly health magazine, social media director\" \"Reported on anything and everything: local government, breaking news, features, op/eds, columns. Took pictures,\"| __truncated__ \"Report on communities outside of the Houston metro area, take photos, produce online and print content, pitch s\"| __truncated__ ...\n $ PREV_SALARIES_TITLES     : chr  \"\" \"\" \"\" \"\" ...\n $ SALARY_original          : chr  \"0\" \"$12 an hour\" \"$12/hour (2012)\" \"13.25/hour ~ 32,000/year \" ...\n $ Gender_Ethnicity_Original: chr  \"Cis male asian\" \"White female\" \"cis white female\" \"Cis white female\" ...\n\n\nLet’s look at the first six rows\n\nhead(MediaBucks)\n\n            TITLE                    COMPANY Salary Salary_Details\n1 Photojournalist  College Student Newspaper   0.00               \n2    Staff Writer               Paxton Media  12.00           hour\n3  Staff reporter Schurz Communications Inc.  12.00           hour\n4        Reporter          Hearst Newspapers  13.25           hour\n5  Staff Reporter           Ogden Newspapers  14.91           hour\n6   Desk Assitant                       KTLA  15.00           hour\n  Salary_Details2     Race Gender    YEARS_EXPERIENCE         LOCATION\n1                    asian   male                   3                 \n2          anhour    white female                   8          Georgia\n3           -2012    white female                   2 Central Kentucky\n4    ~32,000/year    white female                   3          Houston\n5         perhour    white   male 3+ years experience             Utah\n6                 noanswer female                   2      Los Angeles\nnhoto\n2                                                                                                                                                                                                                                                                                                                                                                                                                                                          Write and cover news stories, photograph news, write monthly health magazine, social media director\n3                                                                                                                                                                                                                                                                                                                                                                       Reported on anything and everything: local government, breaking news, features, op/eds, columns. Took pictures, managed web uploads and social media accounts, produced short videos. \n4                                                                                                                                                                                                                                                                                                                                                                                                                             Report on communities outside of the Houston metro area, take photos, produce online and print content, pitch story ideas, etc. \ndaily beat reporting, photos, social media\n6 Organize daily field drives and retrieves file videos\\nUse FTP system to send/receive video files from the field\\nMakes beat checks of police and fire departments\\nLog/transcribe daily video feeds\\nAnswers viewer phone calls, taking stories from viewers\\nChecks for possible stories via all social media channels\\nChecks email for possible stories and upcoming news events\\nListens to viewers complaints; accepts criticism in an even handed manner; and offers suggestions or answers as appropriate\\nWatch and log daily competition newscasts\n  PREV_SALARIES_TITLES           SALARY_original Gender_Ethnicity_Original\n1                                              0            Cis male asian\n2                                    $12 an hour              White female\n3                                $12/hour (2012)          cis white female\n4                      13.25/hour ~ 32,000/year           Cis white female\n5                                $14.91 per hour            cis white male\n6                                       $15/hour                cis female\n\n\nHere is a quick way to view the range of your data\n\nsummary(MediaBucks$Salary)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n      0   42000   60000   64194   78000  770000       4 \n\n\nSize and scope\n\nsum(MediaBucks$Salary, na.rm=TRUE)\n\n[1] 106177432\n\n\n$106 million! for 1,658 journalists\nContext: NYT earnings in 2020 = $100 m Facebook profit for one day: $114 million (Q42021=$10.3B)\naverage\n\nmean(MediaBucks$Salary, na.rm=TRUE)\n\n[1] 64194.34\n\n\nDistribution\n\nquantile(MediaBucks$Salary, c(0.1, 0.2, 0.3, 0.4,0.5, 0.6, 0.7, 0.8, 0.9), na.rm=TRUE)\n\n   10%    20%    30%    40%    50%    60%    70%    80%    90% \n 28720  39000  45000  52000  60000  65000  75000  84000 101700 \n\n\n\nquantile(MediaBucks$Salary, c(0.25, 0.50, 0.75, 0.9, 0.99), na.rm=TRUE)\n\n   25%    50%    75%    90%    99% \n 42000  60000  78000 101700 200000 \n\n\n\n\n\n11.0.5 Navigation Tips\nShortcut Commands\nTab - Autocomplete\nIn Console Window (lower left) \n--Control (or Command) + UP arrow - last lines run\nControl (or Command) + Enter - Runs current or selected lines of code in the top left box of RStudio\nShift + Control (or Command) +P - Reruns previous region code\n \n\n\n11.0.6 Dplyr\ndplyr has many tools for data analysis   \nselect Choose which columns to include  \nfilter Filter the data \narrange Sort the data, by size for continuous variables, by date, or alphabetically \ngroup_by Group the data by a categorical variable \n\nBuild a simple summary table by Gender\n\nMediaBucks %>% \n  select(Gender, Salary) %>% \n  group_by(Gender) %>% \n  summarize(Total = sum(Salary, na.rm=TRUE))\n\n# A tibble: 4 × 2\n  Gender       Total\n  <chr>        <dbl>\n1 female   63198034.\n2 male     35201242.\n3 na        3061718.\n4 noanswer  4716438.\n\n\nWhat is the sample size?\n\nMediaBucks %>% \n  count(Gender) %>% \n  arrange(desc(n))\n\n    Gender    n\n1   female 1025\n2     male  503\n3 noanswer   71\n4       na   59\n\n\nBetter idea: Check Averages!\nBuild a simple summary table by Gender\n\nMediaBucks %>% \n  select(Gender, Salary) %>% \n  group_by(Gender) %>% \n  summarize(Avg_Salary = mean(Salary, na.rm=TRUE))\n\n# A tibble: 4 × 2\n  Gender   Avg_Salary\n  <chr>         <dbl>\n1 female       61717.\n2 male         69983.\n3 na           52788.\n4 noanswer     68354.\n\n\nQuick filter out hourly workers\n\nMediaSalary <- MediaBucks %>% \n  filter(Salary >= 1000)\n\nJust give me a list of the top 10 salaries and companies: use slice_max. slice_max and slice_min are features in the Dplyr library (part of Tidyverse) that produce quick summary tables. See what else you can do with the slice commands.\n\nMediaBucks %>% \n  select(COMPANY, Salary) %>% \n  slice_max(Salary, n = 10)\n\n                 COMPANY Salary\n1     Tribune Publishing 770000\n2              The Onion 550008\n3  G/O Media (The Onion) 500000\n4  G/O Media (The Onion) 500000\n5               VoxMedia 400000\n6             ProPublica 395000\n7    Digital_First_Media 375000\n8          The Intercept 368249\n9           NewYorkTimes 350000\n10             LBI Media 291200\n\n\nQuestions:\n1: View the range of your data    \n2: Number of rows  \n3: Number of rows cut with filter  \n\n\n\n11.0.7 Find Your News Organization\nFilter\n\nWSJ <- subset(MediaBucks, COMPANY==\"WallStreetJournal\")  \n\n\nsummary(WSJ$Salary)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n     38   41000   51100   64275   75750  236000 \n\n\nUsing Wildcards\n\nJournal <- subset(MediaBucks, grepl(\"?Journal\", COMPANY))\n\n\nBloom <- subset(MediaBucks, grepl(\"?Bloomberg\", COMPANY))\n\n ### More Tables\nBuild a table with several companies of your choice\n\nBigBoys <- filter(MediaSalary, COMPANY %in% c(\"NewYorkTimes\", \"WallStreetJournal\", \"Bloomberg\"))    \n\nTable with just reporter salaries\n\nReporters <- subset(MediaBucks, grepl(\"?reporter\", TITLE))\nsummary(Reporters$Salary)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n     12   35000   50625   57077   67250  230504 \n\n\nQuestions:\n1: Who is making $230,504 as a reporter???   \n2: Make a table for editors, figure out medians.   \n3: Find highest paid editor. Resent them.   \n4: Make a table for any position involving data  \nTable with Black reporters at Wall Street Journal\n\nWSJ_Black <- MediaBucks %>% filter(Race ==\"black\", COMPANY == \"WallStreetJournal\")\n\nBuild a simple summary table by Race\n\nRace <- MediaBucks %>% \n  select(Race, Salary) %>% \n  group_by(Race) %>% \n  summarize(Avg_Salary = mean(Salary, na.rm=TRUE)) %>% \n  arrange(desc(Avg_Salary))\nRace\n\n# A tibble: 13 × 2\n   Race       Avg_Salary\n   <chr>           <dbl>\n 1 chinese        76167.\n 2 australian     75000 \n 3 african        73485.\n 4 hispanic       70481.\n 5 black          69371.\n 6 poc            68061.\n 7 asian          66427.\n 8 noanswer       64925.\n 9 latina         64806.\n10 white          63025.\n11 mixed          55756.\n12 mideastern     51833.\n13 native         50000 \n\n\nWait! What are the totals by race?\n\nMediaBucks %>% \n  count(Race) %>% \n  arrange(desc(n))\n\n         Race    n\n1       white 1094\n2    noanswer  192\n3         poc  115\n4       asian   77\n5       black   57\n6    hispanic   53\n7      latina   23\n8       mixed   22\n9     african   13\n10 mideastern    7\n11    chinese    3\n12 australian    1\n13     native    1\n\n\nAdvanced: Build a summary table and count by race\n\nMediaBucks %>% \n  select(Race, Salary) %>% \n group_by(Race) %>% \n  summarize(Total=n(),\n            Avg = mean(Salary, na.rm=TRUE)) %>% \n  arrange(desc(Total))\n\n# A tibble: 13 × 3\n   Race       Total    Avg\n   <chr>      <int>  <dbl>\n 1 white       1094 63025.\n 2 noanswer     192 64925.\n 3 poc          115 68061.\n 4 asian         77 66427.\n 5 black         57 69371.\n 6 hispanic      53 70481.\n 7 latina        23 64806.\n 8 mixed         22 55756.\n 9 african       13 73485.\n10 mideastern     7 51833.\n11 chinese        3 76167.\n12 australian     1 75000 \n13 native         1 50000 \n\n#details: https://stackoverflow.com/questions/36183601/average-and-count-with-aggregation-in-r-with-dplyr\n\n\n\n11.0.8 Visualize\nLet’s make a simple chart of our salaries by race.\n\nRace %>% \nggplot(aes(x = Race, y = Avg_Salary, fill = Avg_Salary)) +\n  geom_col(position = \"dodge\") + \n  theme(legend.position = \"none\") +\n  labs(title = \"Sample chart of race and salary using MediaSalaries\", \n       caption = \"1658 records, sample data. Graphic by Rob Wells, 8/11/2022\",\n       y=\"Average Salary\",\n       x=\"Race / Ethnicity\")\n\n\n\n\nThis is a basic chart using ggplot. To break down the code: - These lines: Race %>% ggplot(aes(x = Race, y = Avg_Salary, fill = Avg_Salary)) + – Uses the Race table, calls the ggplot program, assigns the x axis to Race, y axis to Avg_Salary and fills the color according to Avg_Salary - These lines: geom_col(position = “dodge”) + theme(legend.position = “none”) + – creates a chart of columns, and removes a legend box. - These lines: labs(title = Assign the headline and captions.\n\n\n11.0.9 What You Have Learned So Far\nHow to navigate in R studio   \nHow to install libraries and packages    \nHow to import a .xlsx file into R   \nHow to obtain summary statistics (summary)   \nHow to build basic tables from a dataset   \nHow to conduct filter queries from a dataset   \n\n\n11.0.10 Questions\n1: Build a table for NewYorkTimes employees, and determine median salary of NewYorkTimes employees   \n\n#your answer here\n\n  2: Identify title, gender and race of the highest paid position at NYT  \n\n#your answer here\n\n3: Search for Bloomberg,  check median salary, compare to NYT results above.\n\n#your answer here\n\n\n\n11.0.11 Tutorials\nMaryJo Webster tutorials https://sites.google.com/view/mj-basic-data-academy/intro-to-r?authuser=0\nMerrill College eBook: Data Journalism with R and the Tidyverse https://wellsdata.github.io/data_journalism_class/_book/\nExcellent book by Sharon Machlis https://www.routledge.com/Practical-R-for-Mass-Communication-and-Journalism/Machlis/p/book/9781138726918\nFirst five chapters are free on her website. My recommendation: buy the book. https://www.machlis.com/R4Journalists/\nAll Cheat Sheets https://www.rstudio.com/resources/cheatsheets/\nAndrew Ba Tran first Data Analysis Steps Using R https://docs.google.com/presentation/d/1O0eFLypJLP-PAC63Ghq2QURAnhFo6Dxc7nGt4y_l90s/edit#slide=id.p\nBase R Cheat Sheet https://www.povertyactionlab.org/sites/default/files/r-cheat-sheet.pdf"
  },
  {
    "objectID": "github.html",
    "href": "github.html",
    "title": "12  Using GitHub",
    "section": "",
    "text": "GitHub is a platform for managing and storing files, data and code built atop Git, a popular open source version control software. GitHub accounts are free and it’s easy to get started. The one prerequisite is that you have Git installed on your local computer. There are installers for Mac, Windows and Linux."
  },
  {
    "objectID": "github.html#how-it-works",
    "href": "github.html#how-it-works",
    "title": "12  Using GitHub",
    "section": "12.1 How It Works",
    "text": "12.1 How It Works\nVersion control is based on the ideas that you want to keep track of changes you make to a collection of files and that multiple people can work together without getting in each other’s way or having to do things in a set order. For individual users, it’s great for making sure that you always have your work.\nGitHub users work in what are known as repositories on their local computers and also push changes to a remote repository located on GitHub. That remote repository is key: if you lose your computer, you can fetch a version of your files from GitHub. If you want to work with someone else on the same files, you can each have a local copy, push changes to GitHub and then pull each others’ changes back to your local computers.\nSo, like Microsoft Word’s track changes but with a remote backup and multiple editors."
  },
  {
    "objectID": "github.html#getting-started",
    "href": "github.html#getting-started",
    "title": "12  Using GitHub",
    "section": "12.2 Getting Started",
    "text": "12.2 Getting Started\nAfter installing Git and signing up for a GitHub account, download and install GitHub Desktop. It will have you sign into your GitHub account and then you’ll have access to any existing repositories. If you don’t have any, that’s fine! You can make one locally.\nGitHub has good documentation for working in the Desktop app, and while the emphasis in this book will be on using GitHub for version control, it also supports recording issues (read: problems or questions) with your files, contributing to projects that aren’t yours and more."
  },
  {
    "objectID": "github.html#video-overview",
    "href": "github.html#video-overview",
    "title": "12  Using GitHub",
    "section": "12.3 Video overview",
    "text": "12.3 Video overview\nThis YouTube video from Coder Coder provides a nice overview of Git, GitHub and GitHub Desktop."
  },
  {
    "objectID": "github.html#advanced-use",
    "href": "github.html#advanced-use",
    "title": "12  Using GitHub",
    "section": "12.4 Advanced Use",
    "text": "12.4 Advanced Use\nAlthough our focus is on the GitHub Desktop app, you can use Git and GitHub from your computer’s command line interface, and GitHub has a purpose-built command line client, too. GitHub can also serve as a publishing platform for many types of files, and entire websites are hosted on GitHub Pages."
  },
  {
    "objectID": "r_aggregates_filters.html",
    "href": "r_aggregates_filters.html",
    "title": "13  Aggregates & Filters",
    "section": "",
    "text": "In this chapter, you will learn additional core data skills that allow you to filter, summarize and append new calculations to datasets. The skills in this chapter, once mastered, will transform your ability to analyze data in ways that are difficult in spreadsheets."
  },
  {
    "objectID": "r_aggregates_filters.html#importing-data",
    "href": "r_aggregates_filters.html#importing-data",
    "title": "13  Aggregates & Filters",
    "section": "13.1 Importing data",
    "text": "13.1 Importing data\nThe first thing we need to do is get some data to work with. We do that by reading it in. In our case, we’re going to read a datatable from an “CSV” file, a stripped down version of a spreadsheet you might open in a program like Google Sheets, in which each column is separated by a comma.\nSo step 1 is to import the data. The code to import the data looks like this:\nbaltcity_income<- read_csv(\"assets/data/baltcity_income_clean.csv\") %>% as.data.frame()\nLet’s unpack that.\nThe first part – baltcity_income – is the name of a variable.\nA variable is just a name that we’ll use to refer to some more complex thing. In this case, the more complex thing is the data we’re importing into R that will be stored as a dataframe, which is one way R stores data.\nWe can call this variable whatever we want. The variable name doesn’t matter, technically. We could use any word. Generally we want variable names to be descriptive, hence baltcity_income. It’s good to keep variable names lower case and one word but two or more words need to be connected by an underscore. You can’t start a variable with a number.\nThe <- is the variable assignment operator. It’s how we know we’re assigning something to a word. Think of the arrow as saying “Take everything on the right of this arrow and stuff it into the thing on the left.”\nread_csv() is a function, one that only works when we’ve loaded the tidyverse. A function is a little bit of computer code that takes in information and follows a series of pre-determined steps and spits it back out. A recipe to make pizza is a kind of function. We might call it make_pizza().\nThe function does one thing. It takes a preset collection of ingredients – flour, water, oil, cheese, tomato, salt – and passes them through each step outlined in a recipe, in order. Things like: mix flour and water and oil, knead, let it sit, roll it out, put tomato sauce and cheese on it, bake it in an oven, then take it out.\nThe output of our make pizza() function is a finished pie.\nWe’ll make use of a lot of pre-written functions from the tidyverse and other packages, and even write some of our own. Back to this line of code:\nbaltcity_income<- read_csv(\"assets/data/baltcity_income_clean.csv\") %>% as.data.frame()\nInside of the read_csv() function, we’ve put the name of the file we want to load. Things we put inside of function, to customize what the function does, are called arguments. And lastly, we added a pipe operator %>% (shift + cntl + M) that adds another command to turn the imported data into a data frame with as.data.frame(). The pipe operator - %>% - basically tells R to “and then do this.”\nHere is the entire command in a code chunk. Run it by clicking the green arrow to the right below.\n\n#Set working directory to .../data_journalism_class/04_labs/lab_04/pre_lab_04\n\nbaltcity_income <- read.csv(\"assets/data/baltcity_income_clean.csv\") %>% \n  as.data.frame()\n\nIn this data set, each row represents a Census district, and each column represents a feature of that district: its location, the median household income in 2010, 2016, 2020, the neighborhood identifier and geographic coordinators.\nAfter loading the data, it’s a good idea to get a sense of its shape. What does it look like? There are several ways we can examine it.\nBy looking in the R Studio environment window, we can see the number of rows (called “obs.”, which is short for observations), and the number of columns (called variables). We can double click on the dataframe name in the environment window, and explore it like a spreadsheet.\nThere are several useful functions for getting a sense of the dataset right in our markdown document.\nIf we run glimpse(baltcity_income), it will give us a list of the columns, the data type for each column and and the first few values for each column.\n\nglimpse(baltcity_income)\n\nRows: 200\nColumns: 6\n$ Neighborhood <chr> \"Canton\", \"Patterson Park North & East\", \"Canton\", \"Canto…\n$ x2010        <int> 75938, 58409, 77841, 70313, 86157, 60439, 47131, 59236, 2…\n$ x2016        <int> 100985, 96171, 116875, 97153, 85986, 79063, 64643, 100778…\n$ x2020        <int> 128839, 130357, 151389, 114946, 98194, 95536, 86125, 1018…\n$ Census       <dbl> 101.00, 102.00, 103.00, 104.00, 105.00, 201.00, 202.00, 2…\n$ GEOID        <dbl> 24510010100, 24510010200, 24510010300, 24510010400, 24510…\n\n\nIf we type head(baltcity_income), it will print out the columns and the first six rows of data.\n\nhead(baltcity_income)\n\n                 Neighborhood x2010  x2016  x2020 Census       GEOID\n1                      Canton 75938 100985 128839    101 24510010100\n2 Patterson Park North & East 58409  96171 130357    102 24510010200\n3                      Canton 77841 116875 151389    103 24510010300\n4                      Canton 70313  97153 114946    104 24510010400\n5                 Fells Point 86157  85986  98194    105 24510010500\n6                 Fells Point 60439  79063  95536    201 24510020100\n\n\nWe can also click on the data name in the R Studio environment window to explore it interactively.\n\n13.1.1 Group by and count\nThere is some overlap among the Census tracts, which typically are groups of betweem 1,200 to 8,000 people, and neighborhoods, which can be much larger. Let’s figure out how many neighborhoods are represented in this dataset.\ndplyr has a group by function that compiles things together and then produces simple summaries by counting things, or averaging them together. It’s a good place to start.\nThe first step of every analysis starts with the data being used. Then we apply functions to the data.\nIn our case, the pattern that you’ll use many, many times is: data %>% group_by(COLUMN NAME) %>% summarize(VARIABLE NAME = AGGREGATE FUNCTION(COLUMN NAME))\nIn our dataset, the column with neighborhood identifier is called “Neighborhood.” Neighborhoods overlap with Census tracts.\nHere’s the code to count the number of census tracts in each neighborhood:\n\nbaltcity_income %>%\n  group_by(Neighborhood) %>%\n  summarise(\n    count_tracts = n()\n  )\n\n# A tibble: 56 × 2\n   Neighborhood                      count_tracts\n   <chr>                                    <int>\n 1 Allendale/Irvington/S. Hilton                6\n 2 Beechfield/Ten Hills/West Hills              3\n 3 Belair-Edison                                4\n 4 Brooklyn/Curtis Bay/Hawkins Point            4\n 5 Canton                                       3\n 6 Cedonia/Frankford                            5\n 7 Cherry Hill                                  3\n 8 Chinquapin Park/Belvedere                    2\n 9 Claremont/Armistead                          4\n10 Clifton-Berea                                5\n# ℹ 46 more rows\n\n\nSo let’s walk through that.\nWe start with our dataset – baltcity_incomes – and then we tell it to group the data by a given field in the data. In this case, we wanted to group together all the counties, signified by the field name Neighborhood, which you could get from using the glimpse() function. After we group the data, we need to count them up.\nIn dplyr, we use the summarize() function, which can do alot more than just count things.\nInside the parentheses in summarize, we set up the summaries we want. In this case, we just want a count of the number of loans for each county grouping. The line of code count_tracts = n(), says create a new field, called count_tracts and set it equal to n(). n() is a function that counts the number of rows or records in each group. Why the letter n? The letter n is a common symbol used to denote a count of something.\nWhen we run that, we get a list of counties with a count next to them. But it’s not in any order.\nSo we’ll add another “and then do this” symbol – %>% – and use a new function called arrange(). Arrange does what you think it does – it arranges data in order. By default, it’s in ascending order – smallest to largest. But if we want to know the county with the most loans, we need to sort it in descending order. That looks like this:\n\nbaltcity_income %>%\n  group_by(Neighborhood) %>%\n  summarise(\n    count_tracts = n()\n  ) %>% \n  arrange(desc(count_tracts))\n\n# A tibble: 56 × 2\n   Neighborhood                         count_tracts\n   <chr>                                       <int>\n 1 Southwest Baltimore                             8\n 2 Allendale/Irvington/S. Hilton                   6\n 3 Medfield/Hampden/Woodberry/Remington            6\n 4 Sandtown-Winchester/Harlem Park                 6\n 5 Cedonia/Frankford                               5\n 6 Clifton-Berea                                   5\n 7 Greater Charles Village/Barclay                 5\n 8 Greater Rosemont                                5\n 9 Harford/Echodale                                5\n10 Inner Harbor/Federal Hill                       5\n# ℹ 46 more rows\n\n\nThe Census data contains a column detailing the neighborhood. It has associated the Census tracts to neighborhood names. This dataset may have several neighborhood values since Census tracts are a smaller unit of measurement.\nSouthwest Baltimore neighborhood is spread out over 8 census tracts, more than any other neighborhood.\nHere’s the code to determine the count the number of census tracts in each neighborhood:\n\nbaltcity_income %>%\n   summarise(\n    count_tracts = n()\n  )\n\n  count_tracts\n1          200"
  },
  {
    "objectID": "r_aggregates_filters.html#interviewing-your-data-min-max-mean-medians",
    "href": "r_aggregates_filters.html#interviewing-your-data-min-max-mean-medians",
    "title": "13  Aggregates & Filters",
    "section": "13.2 Interviewing Your Data: Min, Max, Mean, Medians",
    "text": "13.2 Interviewing Your Data: Min, Max, Mean, Medians\nWhat is the typical median income? What about the highest and lowest median incomes in the city? For that, we can use the min() and max() functions.\n\nbaltcity_income %>%\n  select(Neighborhood, x2010, x2016, x2020, Census) %>% \n  summarise(\n    count_tracts = n(),\n    x2020_median = median(x2020, na.rm=TRUE),\n    min_2020 = min(x2020, na.rm=TRUE),\n    max_2020 = max(x2020, na.rm=TRUE)\n  ) \n\n  count_tracts x2020_median min_2020 max_2020\n1          200        49875    13559   199531\n\n\nHere we see the typical median household income is $49,875 by census tract for Baltimore City in 2020 (see result for x2020 median). The lowest median income was $13,559 and the highest was $199,531. From another Census analysis, we know hat citywide, the median household income was $52,164 for 2016-2020. The na.rm=TRUE argument lets R knock out any empty rows from the calculation.\nHere’s another quick way to determine the distribution of a particular column of data\n\nsummary(baltcity_income$x2020)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n  13559   35702   49875   56311   64372  199531       5 \n\n\nThis tells us the minimum, maximum, median, average (mean), and the first and third quartile, as well as rows with no values.\n\n13.2.1 Filters: Extracting Needles from Haystacks\nWhere are these rich and poor places? Let’s filter for the lowest value, $13,559, and find out where it is\n\nbaltcity_income %>%\n  #temp code - remove later\n  as.data.frame() %>% \n  select(Neighborhood, x2020) %>% \n  filter(x2020 ==13559) \n\n         Neighborhood x2020\n1 Upton/Druid Heights 13559\n\n\nIt is part of the Upton/Druid Heights neighborhood in West Baltimore.\nWe can stack filters using the Or connector: | It’s above the enter key on a Mac keyboard\n\nbaltcity_income %>%\n  select(Neighborhood, x2020) %>% \n  filter((x2020 ==13559) | (x2020==199531))\n\n                       Neighborhood  x2020\n1               Upton/Druid Heights  13559\n2 North Baltimore/Guilford/Homeland 199531\n\n\nNow we know in one report the wealthiest neighborhood, North Baltimore/Guilford/Homeland, and the poorest, Upton/Druid Heights.\nRead this for more details about logical operators.\nLet’s filter for the wealthy neighborhoods, all above $100,000\n\nbaltcity_income %>%\n  select(Neighborhood, x2020) %>% \n  filter(x2020 > 100000) %>% \n  arrange(desc(x2020))\n\n                        Neighborhood  x2020\n1  North Baltimore/Guilford/Homeland 199531\n2  North Baltimore/Guilford/Homeland 195353\n3    Greater Roland Park/Poplar Hill 155605\n4                    South Baltimore 151659\n5                             Canton 151389\n6    Greater Roland Park/Poplar Hill 151146\n7          Inner Harbor/Federal Hill 133333\n8                       Highlandtown 130769\n9        Patterson Park North & East 130357\n10                            Canton 128839\n11                   South Baltimore 121685\n12         Inner Harbor/Federal Hill 120729\n13                            Canton 114946\n14       Mount Washington/Coldspring 109688\n15                      Highlandtown 107438\n16         Inner Harbor/Federal Hill 107344\n17                       Fells Point 101815\n\n\nUsing the summarise function, we can figure out an average value on a column. In this case, we’re going to average all of the median income values by census tract.\n\nbaltcity_income %>%\n  select(Neighborhood, x2020, Census) %>% \n    summarise(\n    count_tracts = n(),\n    x2020_avg = mean(x2020, na.rm=TRUE)) \n\n  count_tracts x2020_avg\n1          200  56311.21\n\n\nIn the example above, we created a new summary value called x2020_avg that holds the result of the math, the average of the entire x2020 column of median incomes.\n\n\n13.2.2 Other summarization methods: mean, median, min and max\nHere’s another trick, pulling out the minimum and maximum values\n\nbaltcity_income %>%\n  select(Neighborhood, x2020, Census) %>% \n    summarise(\n    count_tracts = n(),\n    min_2020 = min(x2020, na.rm=TRUE),\n    max_2020 = max(x2020, na.rm=TRUE))\n\n  count_tracts min_2020 max_2020\n1          200    13559   199531\n\n\nTo kick it up a notch, here’s the same idea but with averages and medians for the three years in our data: 2010, 2016, 2020.\n\nbaltcity_income %>%\n  select(Neighborhood, x2010, x2016, x2020, Census) %>% \n    summarise(\n    count_tracts = n(),\n    x2020_median = median(x2020, na.rm=TRUE),\n    x2020_avg = mean(x2020, na.rm=TRUE),\n    x2016_median = median(x2016, na.rm=TRUE),\n    x2016_avg = mean(x2016, na.rm=TRUE),\n    x2010_median = median(x2010, na.rm=TRUE),\n    x2010_avg = mean(x2010, na.rm=TRUE)) \n\n  count_tracts x2020_median x2020_avg x2016_median x2016_avg x2010_median\n1          200        49875  56311.21        39583  46744.03      37079.5\n  x2010_avg\n1  41923.06\n\n\nUse the right diamond at x2016_median to see columns 5-7.\n\n\n\n13.2.3 Using sum\nThere’s much more we can to summarize each group. Let’s pull in another dataset and summarize by group.\n\n#loading 2020 and 2010 Baltimore City population by race\nbaltcity_race <- read_csv(\"assets/data/baltcity_race_8_13.csv\") %>% \n  as.data.frame()\n\nNew names:\nRows: 201 Columns: 18\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" chr\n(2): census_tract, county dbl (16): ...1, geoid, x2010_total, x2010_white,\nx2010_black, x2010_native_a...\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `` -> `...1`\n\n\nLet’s say we wanted to know the total population by white people in Baltimore? For that, we could use the sum() function to add up all of the population in the column “x2020_white”. We put the column we want to total – “amount” – inside the sum() function sum(amount). Note that we can simply add a new summarize function here, keeping our count_loans field in our output table.\nThis abbreviated slice of Census data contains columns detailing the population by race in Census tracts. There is the x2020_total which provides the full population, then x2020_white, x2020_black, x2020_hispanic. We omitted Asians and Pacific islanders and people identifying with more than one race for simplicity in this example.\nHere we can select a race variable and summarize it.\n\nbaltcity_race %>% \n  select(x2020_white, x2020_black) %>% \n  summarize(\n    white_total = sum(x2020_white, na.rm = TRUE),\n    black_total = sum(x2020_black, na.rm = TRUE)\n  )\n\n  white_total black_total\n1      178996      375002\n\n\n\n\n13.2.4 Mutate\nOne powerful function in dplyr is the mutate command, which allows us to add together columns, create new columns with averages, percentages, or other calculations. We’ll get into this more next week, but understand that mutate is an important go-to command to transform existing data into something new. It’s very powerful and you will use it a lot.\nHere’s a brief example using the baltcity_race table. We want to construct a ratio of the black population to the white population by Census tract. With mutate, we create a new column called ratio_w_b and then insert the math: the 2020 black population by census tract divided into the 2020 white population. And then we sort in descending order, highest to lowest\n\nrace1 <- baltcity_race %>% \n  select(census_tract, x2020_white, x2020_black) %>% \n  mutate(ratio_w_b = (x2020_black/x2020_white)) %>% \n  arrange(desc(ratio_w_b))\n\nhead(race1)\n\n          census_tract x2020_white x2020_black ratio_w_b\n1    Census Tract 1502           0        2444       Inf\n2    Census Tract 1605           0        3643       Inf\n3 Census Tract 2804.02           1        1264 1264.0000\n4 Census Tract 1608.02          10        3264  326.4000\n5    Census Tract 1607          12        3806  317.1667\n6 Census Tract 1608.01          11        3167  287.9091\n\n\nLook at the new table above: we have a new column – ratio_w_b – that shows the Black to white population ratio. In the next chapter, we will use mutate to kick up your data skils a notch.\nPre-Lab Question:  We know the median income for Baltimore City (I just told you a few paragraphs ago). Construct a filter for all census tracts below the citywide average household income for 2020. Count them. What percentage of the city’s census tracts are below the average? Put that in code too. Draft a tweet with your findings.\nAnswer this question in English: Write in Elms"
  },
  {
    "objectID": "r-mutating.html",
    "href": "r-mutating.html",
    "title": "14  Mutating data",
    "section": "",
    "text": "To do that in R, we can use dplyr and mutate to calculate new metrics in a new field using existing fields of data. That’s the essence of mutate - using the data you have to answer a new question.\nSo first we’ll import the tidyverse so we can work with it.\nWe’ll import a dataset of median household income in Baltimore for the 2010, 2016 and 2020 surveys. The data is in the data folder in this chapter’s pre-lab directory. We’ll use this to explore ways to create new information from existing data.\n\nbaltcity_income <- read_csv(\"assets/data/baltcity_income_clean.csv\") %>% \n  as.data.frame()\n\n#working on this with your laptop, uncomment and use this code below\n#baltcity_income<- read_csv(\"baltcity_income_clean.csv\") %>% \n#  as.data.frame()\n\nOne main question involves how the median income changed from 2010 to 2020. First, let’s add a column called diff_2010_2020 to see how median income changed for each census tract. The code is pretty simple. Remember, with summarize, we used n() to count things. With mutate, we use very similar syntax to calculate a new value – a new column of data – using other values in our dataset.\n\n  baltcity_income %>%\n  select(Census, Neighborhood, x2010, x2020) %>%\n  mutate(Diff_Income = (x2020-x2010)) %>% \n  head()\n\n  Census                Neighborhood x2010  x2020 Diff_Income\n1    101                      Canton 75938 128839       52901\n2    102 Patterson Park North & East 58409 130357       71948\n3    103                      Canton 77841 151389       73548\n4    104                      Canton 70313 114946       44633\n5    105                 Fells Point 86157  98194       12037\n6    201                 Fells Point 60439  95536       35097\n\n\nNow we’ve got our Diff_Income column. Let’s provide some context and use a percentage change calculation to compare the gains. We’ll add a new column, Diff_Pct_2020. Remember the percentage change calculation is (New-Old)/Old\n\nbaltcity_income %>%\n  select(Census, Neighborhood, x2010, x2020) %>%\n    mutate(Diff_Income = (x2020-x2010)) %>% \n    mutate(Diff_Pct_2020 = (x2020-x2010)/x2010) %>% \n    head()\n\n  Census                Neighborhood x2010  x2020 Diff_Income Diff_Pct_2020\n1    101                      Canton 75938 128839       52901     0.6966341\n2    102 Patterson Park North & East 58409 130357       71948     1.2317965\n3    103                      Canton 77841 151389       73548     0.9448491\n4    104                      Canton 70313 114946       44633     0.6347759\n5    105                 Fells Point 86157  98194       12037     0.1397101\n6    201                 Fells Point 60439  95536       35097     0.5807012\n\n\nLook at Diff_Pct_2020. Do those numbers look like we expect them to? No. They’re a decimal expressed as a percentage. So let’s fix that by multiplying by 100. We’re also rounding the result to two digits from nine so it looks cleaner\n\nbaltcity_income %>%\n  select(Census, Neighborhood, x2010, x2020) %>%\n  mutate(Diff_Income = (x2020-x2010)) %>% \n  mutate(Diff_Pct_2020 = round((x2020-x2010)/x2010*100,2)) %>% \n  head()\n\n  Census                Neighborhood x2010  x2020 Diff_Income Diff_Pct_2020\n1    101                      Canton 75938 128839       52901         69.66\n2    102 Patterson Park North & East 58409 130357       71948        123.18\n3    103                      Canton 77841 151389       73548         94.48\n4    104                      Canton 70313 114946       44633         63.48\n5    105                 Fells Point 86157  98194       12037         13.97\n6    201                 Fells Point 60439  95536       35097         58.07\n\n\nNow, let’s fix the ordering with arrange and sort descending on the percentage change column.\n\nbaltcity_income %>%\n  select(Census, Neighborhood, x2010, x2020) %>%\n  mutate(Diff_Income = (x2020-x2010)) %>% \n  mutate(Diff_Pct_2020 = round((x2020-x2010)/x2010*100,2)) %>% \n  arrange(desc(Diff_Pct_2020)) %>% \n  head()\n\n   Census                      Neighborhood x2010  x2020 Diff_Income\n1  402.00               Downtown/Seton Hill 13229  43333       30104\n2  703.00                  Madison/East End 15000  35000       20000\n3  102.00       Patterson Park North & East 58409 130357       71948\n4 2607.00     Orangeville/East Highlandtown 36901  80000       43099\n5 2711.02 North Baltimore/Guilford/Homeland 99300 199531      100231\n6  807.00                   Greenmount East 20679  40885       20206\n  Diff_Pct_2020\n1        227.56\n2        133.33\n3        123.18\n4        116.80\n5        100.94\n6         97.71\n\n\nSo we know who the winners since the descending sort by Diff_Pct_2020 shows us Census tracts by the highest percentage first. Now, which areas suffered the biggest declines in median income? We will copy the previous code and alter the arrange so it is ascending from the lowest value.\n\nbaltcity_income %>%\n  select(Census, Neighborhood, x2010, x2020) %>%\n    mutate(Diff_Income = (x2020-x2010)) %>% \n    mutate(Diff_Pct_2020 = round((x2020-x2010)/x2010*100,2)) %>% \n    arrange(Diff_Pct_2020) %>% \n    head()\n\n   Census                    Neighborhood x2010 x2020 Diff_Income Diff_Pct_2020\n1 1603.00 Sandtown-Winchester/Harlem Park 22292 13963       -8329        -37.36\n2 2804.02               Edmondson Village 52784 41179      -11605        -21.99\n3 2715.03 Greater Roland Park/Poplar Hill 79861 62500      -17361        -21.74\n4 2102.00      Washington Village/Pigtown 46319 36661       -9658        -20.85\n5  805.00                   Clifton-Berea 35223 28203       -7020        -19.93\n6 2716.00           Southern Park Heights 43265 34832       -8433        -19.49\n\n\n\n14.0.1 Using mutate to clean data\nFor this example, we’ll examine a dataset of loans small businesses obtained to stay afloat during the Covid-19 pandemic. It’s called the PPP loan database which stands for Paycheck Protection Program loans.\nTake a look at the city column in our data.\n\n#uncomment below to see the entire dataframe\n#View(maryland_ppp)\n\nYou’ll notice that there’s a mix of styles: “Baltimore” and “BALTIMORE” for example. R will think those are two different cities, and that will mean that any aggregates we create based on city won’t be accurate.\nHow can we fix that? Mutate to the rescue! And a function called str_to_upper that will convert a character column into all uppercase.\n\nmaryland_ppp %>%\n  mutate(\n    upper_city = str_to_upper(city)\n) %>% \n   select(city, upper_city, name, amount) %>% \n  head()\n\n# A tibble: 6 × 4\n  city            upper_city      name                            amount\n  <chr>           <chr>           <chr>                            <dbl>\n1 Columbia        COLUMBIA        BAYWOOD HOTELS INC.            2000000\n2 Lanham          LANHAM          PARTNERS ELECTRIC SERVICE INC. 1086257\n3 Bethesda        BETHESDA        RP3 LLC                         787500\n4 Chevy Chase     CHEVY CHASE     SUSHI KO CHEVY CHASE LLC.       655732\n5 Capitol Heights CAPITOL HEIGHTS VILLAGE ACADEMY OF MARYLAND     469800\n6 Brentwood       BRENTWOOD       GOSHEN HOUSE TRADING LLC        346500\n\n\n\nPro Tip: Notice we kept the original data in city and transformed it in a new column, upper_city. Always a good practice to keep your original data intact in case you make a coding mistake or need to change the original for reference.\n\nWe could do the same thing with the address column in order to standardize that for analysis, too.\nThink of how easy this is compared to a similar data cleaning lesson in Google Sheets.\n\n\n14.0.2 A more powerful use\nMutate is even more useful when combined with some additional functions. Let’s say you want to know if the servicing lender is located in Maryland or outside the state. There are three possible answers:\n\nThe lender is in Maryland\nThe lender is outside Maryland\nThe data doesn’t tell us (servicing_lender_state is blank or NA)\n\nWe can create a new column that accounts for these possibilities and populate it using mutate and case_when, which is like an if/else statement but for more than two options.\n\nmaryland_with_in_out <- maryland_ppp %>%\n  mutate(\n    in_out = case_when(\n        servicing_lender_state == 'NA' ~ \"NA\",\n        servicing_lender_state == 'MD' ~ \"IN\",\n        servicing_lender_state != 'MD' ~ \"OUT\"\n      )\n  ) \n\nmaryland_with_in_out %>% \n  select(name, amount, servicing_lender_state, in_out) %>% \n  head()\n\n# A tibble: 6 × 4\n  name                            amount servicing_lender_state in_out\n  <chr>                            <dbl> <chr>                  <chr> \n1 BAYWOOD HOTELS INC.            2000000 MD                     IN    \n2 PARTNERS ELECTRIC SERVICE INC. 1086257 NY                     OUT   \n3 RP3 LLC                         787500 VA                     OUT   \n4 SUSHI KO CHEVY CHASE LLC.       655732 NY                     OUT   \n5 VILLAGE ACADEMY OF MARYLAND     469800 WV                     OUT   \n6 GOSHEN HOUSE TRADING LLC        346500 NJ                     OUT   \n\n\nWe can then use our new in_out column in group_by statements to make summarizing easier.\nIn this case there are no Maryland loans where servicing_lender_state has a value of ‘NA’, but you should never assume that will be the case for a dataset. If you know that the only options are the lender is in Maryland or is outside it, you can rewrite the previous code as an if/else statement:\n\nmaryland_with_in_out <- maryland_ppp %>%\n  mutate(\n    in_out = if_else(\n        servicing_lender_state == 'MD', \"IN\", \"OUT\"\n      )\n  )\n\nmaryland_with_in_out %>% \n  select(name, amount, servicing_lender_state, in_out) %>% \n  head()\n\n# A tibble: 6 × 4\n  name                            amount servicing_lender_state in_out\n  <chr>                            <dbl> <chr>                  <chr> \n1 BAYWOOD HOTELS INC.            2000000 MD                     IN    \n2 PARTNERS ELECTRIC SERVICE INC. 1086257 NY                     OUT   \n3 RP3 LLC                         787500 VA                     OUT   \n4 SUSHI KO CHEVY CHASE LLC.       655732 NY                     OUT   \n5 VILLAGE ACADEMY OF MARYLAND     469800 WV                     OUT   \n6 GOSHEN HOUSE TRADING LLC        346500 NJ                     OUT   \n\n\nMutate is an essential tool to make your data more useful and allows you to ask more questions.\n\n\n15 Pre-Lab Questions:\nBased on the skills you have learned above, use this dataset of Maryland cities ‘assets/data/city_md_income.csv’ (it is included in your prelab folder)\nAnd answer the following questions:\nQuestion #1:\n\nCalculate the difference in median income from 2010 to 2020 for all places listed. Calculate the percentage change.\n\n\n\n\nWhich city had the highest absolute change? Which had the highest percentage change?\n\n\n\nProduce a table with the top 25 places ranked by the highest percentage change.\n\n\n\nProduce a second table with the top 25 places ranked by the lowest or negative percentage change.\n\n\n\nQuestion #2:  A) Determine the summary statistics of mdcities median income for 2020. Determine the value for the first quartile.\n\nUse mutate and case_when to create a column called “category.” Within this, label cities in the first quartile as “lowest” and the remaining “above”. Create a new table called “lowest” with your results\n\n\n\n\nQuestion #3:  Answer this question in English: Write in Elms\nBuilding on the previous lesson on filtering, describe how you would determine the median value of the percentage change and produce a table with the 10 neighborhoods with the highest change and the 10 with the lowest change."
  },
  {
    "objectID": "r-join-bind.html",
    "href": "r-join-bind.html",
    "title": "15  Joins",
    "section": "",
    "text": "In this chapter:\n\n\nA join combines two or more tables (data frames) by column.\njoining to data frames requires exact matches on one or more columns. Close matches don’t count.\nUse codes in one data frame to “look up” information in another, and attach it to a row, such as the translation of codes to words or demographics of a Census tract.\nMany public records databases come with “lookup tables” or “code sheets”. Make sure to ask for the codes AND their translations in a data request.\nReporters don’t always stick to matchmaking the way the database designers intended. “Enterprise” joins are those that let you find needles in a haystack, such as bus drivers with a history of DUIs.\nMatching one data frame against an entirely different one will always produce errors. You can minimize the kind of error you fear most – false positives or false negatives – but you likely will have to report out your findings on the ground."
  },
  {
    "objectID": "r-join-bind.html#join-basics",
    "href": "r-join-bind.html#join-basics",
    "title": "15  Joins",
    "section": "15.1 Join basics",
    "text": "15.1 Join basics\n“Join” in computer programming mean adding columns to a data frame by combining it with another data frame or table. Reporters use it in many ways, some intended by the people who made the data source, and some not.\nFrom now on, we’ll start using the term “table” instead of “data frame”, since we can talk about several different ones at the same time.\nMany databases are created expecting you to join tables (data frames) because it’s a more efficient way to store and work with large databases. This is what’s called a “relational database”, and they’re everywhere.\nHere’s an example, using campaign finance information. The Federal Elections Commission distributes campaign contribution in related tables, each referring to a different noun. One table lists donations, the other lists candidates and other political action committees. They link together using a common code:\n\n\n\nCampaign finance join\n\n\nThe reason to do this is that you never have to worry that any changes to the candidate information – the treasurer, the address or the office sought – carries over to the donation. It’s only listed once in the candidate table. Most large databases are constructed this way. For example:\n\nYour school records are held using your student ID, which means that your address and home email only needs to be changed once, not in every class or in every account you have with the school.\nInspection records, such as those for restaurants, hospitals, housing code violations and workplace safety, typically have at least three tables: The establishment (like a restaurant or a workplace), an inspection (an event on a date), and a violation (something that they found). They’re linked together using establishment ID’s.\nA court database usually has many types of records: A master case record links to information on charges, defendants, lawyers, sentences and court hearings.\n\nEach table, then, is described using a different noun – candidates or contributions; defendants or cases; students or courses. This conforms to the tidy data principle that different types of information are stored in different tables."
  },
  {
    "objectID": "r-join-bind.html#matchmaking-with-joins",
    "href": "r-join-bind.html#matchmaking-with-joins",
    "title": "15  Joins",
    "section": "15.2 Matchmaking with joins",
    "text": "15.2 Matchmaking with joins\nThe political data type of join described above is often referred to as a “lookup table”. You’ll match codes to their meanings in a way that was intended by the people who made the database. But there are other ways reporters use joins:\n\n“Enterprise” joins\nJournalists have taken to calling a specific kind of join “enterprise”, referring to the enterprising reporters who do this. Here, you’ll look for needles in a haystack. Some of the most famous data journalism investigations relied on joining two databases that started from completely different sources, such as:\n\nBus drivers who had DUI citations\nDonors to a governor who got contracts from the state\nDay care workers with criminal records\nSmall businesses that have defaulted on government backed loans that got a PPP loan anyway.\n\nWhen you match these kinds of datasets, you will always have some error. You always have to report out any suspected matches, so they are time consuming stories.\nIn the mid-2000s, when some politicians insisted that dead people were voting and proposed measures to restrict registration, almost every regional news organization sent reporters on futile hunts for the dead voters. They got lists of people on the voter rolls, then lists of people who had died through the Social Security Death Index or local death certificates. I never met anyone who found a single actual dead voter, but months of reporter-hours were spent tracking down each lead.\nIt’s very common for two people to have the same name in a city. In fact, it’s common to have two people at the same home with the same name – they’ve just left off “Jr.” and “Sr.” in the database. In this case, you’ll find matches that you shouldn’t. These are false positives, or Type I errors in statistics.\nAlso, we rarely get dates of birth or Social Security Numbers in public records, so we have to join by name and sometimes location. If someone has moved, sometimes uses a nickname, or the government has recorded the spelling incorrectly, the join will fail – you’ll miss some of the possible matches. This is very common with company names, which can change with mergers and other changes in management, and can be listed in many different ways.\nThese are false negatives, or Type II errors in statistics.1\nIn different contexts, you’ll want to minimize different kinds of errors. For example, if you are looking for something extremely rare, and you want to examine every possible case – like a child sex offender working in a day care center – you might choose to make a “loose” match and get lots of false positives, which you can check. If you want to limit your reporting only to the most promising leads, you’ll be willing to live with missing some cases in order to be more sure of the joins you find.\nYou’ll see stories of this kind write around the lack of precision – they’ll often say, “we verified x cases of….” rather than pretend that they know of them all.\n\n\nFind cases with interesting characteristics\nYou’ll often want to learn more about a geographic area’s demographics or voting habits or other characteristics, and match it to other data. Sometimes it’s simple: Find the demographics of counties that switched from Trump to Biden as a way to isolate places you might want to visit. Another example from voting might be to find the precinct that has the highest percentage of Latino citizens in the county, then match that precinct against the voter registration rolls to get a list of people you might want to interview on election day. In these instances, the join is used for a filter.\nThis is also common when you have data by zip code or some other geography, and you want to find clusters of interesting potential stories, such as PPP loans in minority neighborhoods.\n\n\nSummarize data against another dataset\nThe previous examples all result in lists of potential story people or places. If you use join on summarized data, you can characterize a broad range of activity across new columns. Simplified, this is how you can write that more PPP money went to predominantly white neighborhoods than those that were majority Black.\n\n\n15.2.1 Types of joins\nThere are several types of joins, each connecting two tables in a slightly different matter. The most important ones are:\n\ninner_join\nleft_join\nanti_join\n\nWe’ll explore how each of these work in example code below:\n\n\n15.2.2 Load libraries\n\n\nWarning: package 'ggplot2' was built under R version 4.2.3\n\n\nWarning: package 'tidyr' was built under R version 4.2.3\n\n\nWarning: package 'readr' was built under R version 4.2.3\n\n\nWarning: package 'dplyr' was built under R version 4.2.3\n\n\nWarning: package 'stringr' was built under R version 4.2.3\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\n\n\n\n15.2.3 Load data\nWe’re going to load four tables to demonstrate different types of joins. All contain information from the U.S. Census 2019 American Community Survey for Maryland counties. Load and examine them.\n\n###\n# Total population for each Maryland county \n# County identified by GEOID (a 5-digit code), not name\n###\n\nmaryland_county_population <- read_rds(\"assets/data/maryland_county_population.rds\")\n\n###\n# A lookup table that shows the name of each Maryland county, paired with GEOID\n###\n\n\nmaryland_county_lookup_table <- read_rds(\"assets/data/maryland_county_lookup_table.rds\")\n\n###\n# Total population for each Maryland county, EXCEPT for Prince George's County\n# County identified by GEOID (a 5-digit code), not name\n###\n\nmaryland_county_population_no_pg <- read_rds(\"assets/data/maryland_county_population_no_pg.rds\")\n\n###\n# Display the tables\n###\n\nmaryland_county_population\n\n# A tibble: 24 × 2\n   geoid total_pop\n   <chr>     <dbl>\n 1 24001     71002\n 2 24003    575421\n 3 24005    828193\n 4 24009     92094\n 5 24011     33260\n 6 24013    168233\n 7 24015    102889\n 8 24017    161448\n 9 24019     31994\n10 24021    255955\n# ℹ 14 more rows\n\nmaryland_county_lookup_table\n\n# A tibble: 24 × 2\n   geoid name                         \n   <chr> <chr>                        \n 1 24001 Allegany County, Maryland    \n 2 24003 Anne Arundel County, Maryland\n 3 24005 Baltimore County, Maryland   \n 4 24009 Calvert County, Maryland     \n 5 24011 Caroline County, Maryland    \n 6 24013 Carroll County, Maryland     \n 7 24015 Cecil County, Maryland       \n 8 24017 Charles County, Maryland     \n 9 24019 Dorchester County, Maryland  \n10 24021 Frederick County, Maryland   \n# ℹ 14 more rows\n\nmaryland_county_population_no_pg \n\n# A tibble: 23 × 2\n   geoid total_pop\n   <chr>     <dbl>\n 1 24001     71002\n 2 24003    575421\n 3 24005    828193\n 4 24009     92094\n 5 24011     33260\n 6 24013    168233\n 7 24015    102889\n 8 24017    161448\n 9 24019     31994\n10 24021    255955\n# ℹ 13 more rows\n\n\n\n\n15.2.4 Inner Join\nThe table maryland_county_population has two columns, one with a geoid code representing each Maryland county (and Baltimore city), and another with total population. The maryland_county_lookup_table is a classic example of a lookup table. It contains the same geoid representing each Maryland county, plus a name column with the proper name.\nWe are going to join maryland_county_population, using the one column both share: geoid. We’ll use an inner_join. The code below says: “Connect the two tables on the geoid column. If a given geoid exists in both tables, include it in our new table. If it isn’t in both, don’t include it.”\n\nupdated_maryland_county_population <- maryland_county_lookup_table %>%\n  inner_join(maryland_county_population, by=\"geoid\")\n\nupdated_maryland_county_population \n\n# A tibble: 24 × 3\n   geoid name                          total_pop\n   <chr> <chr>                             <dbl>\n 1 24001 Allegany County, Maryland         71002\n 2 24003 Anne Arundel County, Maryland    575421\n 3 24005 Baltimore County, Maryland       828193\n 4 24009 Calvert County, Maryland          92094\n 5 24011 Caroline County, Maryland         33260\n 6 24013 Carroll County, Maryland         168233\n 7 24015 Cecil County, Maryland           102889\n 8 24017 Charles County, Maryland         161448\n 9 24019 Dorchester County, Maryland       31994\n10 24021 Frederick County, Maryland       255955\n# ℹ 14 more rows\n\n\nBecause both tables contained the same 24 counties, our new table has 24 counties as well.\n(In this case, they have the same column name, but they don’t have to. As long as they CONTAIN the same thing, they can have different names. You can also join using more than one column).\nWhat happens when they aren’t identical?\nTo illustrate what happens, let’s run the same code, but this time use population table that contains every Maryland county EXCEPT for Prince George’s County. This table only has 23 rows. The lookup table still has 24.\n\n\n# A tibble: 23 × 3\n   geoid name                          total_pop\n   <chr> <chr>                             <dbl>\n 1 24001 Allegany County, Maryland         71002\n 2 24003 Anne Arundel County, Maryland    575421\n 3 24005 Baltimore County, Maryland       828193\n 4 24009 Calvert County, Maryland          92094\n 5 24011 Caroline County, Maryland         33260\n 6 24013 Carroll County, Maryland         168233\n 7 24015 Cecil County, Maryland           102889\n 8 24017 Charles County, Maryland         161448\n 9 24019 Dorchester County, Maryland       31994\n10 24021 Frederick County, Maryland       255955\n# ℹ 13 more rows\n\n\nWhen we join, we get only 23 rows. One table had every Maryland county. The other had every county but Prince George’s. When we inner join, only values that both tables have in common are returned. Thus, we get a table without P.G.\nThis gif from https://github.com/gadenbuie/tidyexplain shows what happens with inner_joins.\n\n\n\n\n\n\n\n15.2.5 Left Joins\nLet’s stick with our mismatched tables to illustrate what happens with another type of join, a left join (and it’s cousin, the right join). The code is the same, but we’ve swapped left_join for inner_join. Remember, our population table is missing P.G. county, but the lookup table has it.\n\nupdated_maryland_county_population_no_pg <- maryland_county_lookup_table %>%\n  left_join(maryland_county_population_no_pg, by=\"geoid\")\n\nupdated_maryland_county_population_no_pg\n\n# A tibble: 24 × 3\n   geoid name                          total_pop\n   <chr> <chr>                             <dbl>\n 1 24001 Allegany County, Maryland         71002\n 2 24003 Anne Arundel County, Maryland    575421\n 3 24005 Baltimore County, Maryland       828193\n 4 24009 Calvert County, Maryland          92094\n 5 24011 Caroline County, Maryland         33260\n 6 24013 Carroll County, Maryland         168233\n 7 24015 Cecil County, Maryland           102889\n 8 24017 Charles County, Maryland         161448\n 9 24019 Dorchester County, Maryland       31994\n10 24021 Frederick County, Maryland       255955\n# ℹ 14 more rows\n\n\nWhat happens? Everywhere there’s a match on GEOID, the population value is returned.\nBut look closely at Prince George’s County. Its value is NA.\nA left_join says “Return every single value from our first table – in this case the lookup table, with 24 rows. Where there’s a match with the population table, make the match. If there is no match, just put NA.”\nUnlike the inner_join, the left_join returned P.G. county despite it’s lack of a match.\nThis gif from https://github.com/gadenbuie/tidyexplain shows what happens with left_joins.\n\n\n\n\n\nA note: left_join has a close cousin called the right_join which isn’t used very often, and we won’t delve into here. It’s basically the same thing, it just starts from the second table, not the first."
  },
  {
    "objectID": "r-join-bind.html#anti-joins",
    "href": "r-join-bind.html#anti-joins",
    "title": "15  Joins",
    "section": "15.3 Anti joins",
    "text": "15.3 Anti joins\nAn anti_join is useful for seeing what values exist in one table that are missing from another table. It comes in handy during data cleaning and when writing more advanced functions. The code below says: “Connect the two tables, but only show me rows that exist in the lookup table, but DO NOT exist in the population table.”\n\nupdated_maryland_county_population_no_pg <- maryland_county_lookup_table %>%\n  anti_join(maryland_county_population_no_pg, by=\"geoid\")\n\nupdated_maryland_county_population_no_pg\n\n# A tibble: 1 × 2\n  geoid name                            \n  <chr> <chr>                           \n1 24033 Prince George's County, Maryland\n\n\nThis gif from https://github.com/gadenbuie/tidyexplain shows what happens with anti_joins."
  },
  {
    "objectID": "r-join-bind.html#joining-risks",
    "href": "r-join-bind.html#joining-risks",
    "title": "15  Joins",
    "section": "15.4 Joining risks",
    "text": "15.4 Joining risks\nThere are lots of risks in joining tables that you created yourself, or that were created outside a big relational database system. Keep an eye on the number of rows returned every time that you join – you should know what to expect.\n\n15.4.1 Double counting with joins\nWe won’t go into this in depth, but just be aware it’s easy to double-count rows when you join. Here’s a made-up example, in which a zip code is on the border and is in two counties:\nSay you want to use some data on zip codes :\n\n\n\nzip code\ncounty\ninfo\n\n\n\n\n21012\nPG\nsome data\n\n\n21012\nBaltimore\nsome more data\n\n\n\nand match it to a list of restaurants in a zip code:\n\n\n\nzip code\nrestaurant name\n\n\n\n\n21012\nMy favorite restaurant\n\n\n21012\nMy second-favorite restaurant\n\n\n\nWhen you match these on zip code, you’ll get 4 rows:\n\n\n\nzip code\ncounty\ninfo\nrestaurant name\n\n\n\n\n21012\nPG\nsome data\nMy favorite restaurant\n\n\n21012\nBaltimore\nsome more data\nMy favorite restaurant\n\n\n21012\nPG\nsome data\nMy second-favorite restaurant\n\n\n21012\nBaltimore\nsome more data\nMy second-favority restaurant\n\n\n\nNow, every time you try to count restaurants, these two will be double-counted.\nIn computing, this is called a “many-to-many” relationship – there are many rows of zip codes and many rows of restaurants. In journalism, we call it spaghetti. It’s usually an unintended mess.\nHere’s a gif that shows the double counting in action.\n\n\n\n\n\n\n\n15.4.2 Losing rows with joins\nThe opposite can occur if you aren’t careful and there are items you want to keep that are missing in your reference table. That’s what happened in the immunization data above for the seven schools that I couldn’t find.\n\n\n15.4.3 Merging or Binding\nJoins are one way to combine two data sets, using shared values in one or more columns. Binding two data sets together is another way.\nLet’s suppose we have two tables with population information for Maryland counties, each with the same columns: geoid, name and total population.\n\nOne has information for Maryland’s 10 largest counties by population\nThe other has information for every other Maryland county.\n\n\n###\n# Total population for each top-10 largest Maryland county \n# County identified by GEOID (a 5-digit code) and name\n###\n\nmaryland_large_county_population <- read_rds(\"assets/data/maryland_large_county_population.rds\")\n\n\n###\n# Total population for all other Maryland counties\n# County identified by GEOID (a 5-digit code) and name\n###\nmaryland_small_county_population <- read_rds(\"assets/data/maryland_small_county_population.rds\")\n\n\n# Display\nmaryland_large_county_population\n\n# A tibble: 10 × 3\n   geoid name                             total_pop\n   <chr> <chr>                                <dbl>\n 1 24031 Montgomery County, Maryland        1047661\n 2 24033 Prince George's County, Maryland    910551\n 3 24005 Baltimore County, Maryland          828193\n 4 24510 Baltimore city, Maryland            602274\n 5 24003 Anne Arundel County, Maryland       575421\n 6 24027 Howard County, Maryland             322407\n 7 24021 Frederick County, Maryland          255955\n 8 24025 Harford County, Maryland            253736\n 9 24013 Carroll County, Maryland            168233\n10 24017 Charles County, Maryland            161448\n\nmaryland_small_county_population\n\n# A tibble: 14 × 3\n   geoid name                          total_pop\n   <chr> <chr>                             <dbl>\n 1 24029 Kent County, Maryland             19456\n 2 24039 Somerset County, Maryland         25699\n 3 24023 Garrett County, Maryland          29155\n 4 24019 Dorchester County, Maryland       31994\n 5 24011 Caroline County, Maryland         33260\n 6 24041 Talbot County, Maryland           37087\n 7 24035 Queen Anne's County, Maryland     50163\n 8 24047 Worcester County, Maryland        51967\n 9 24001 Allegany County, Maryland         71002\n10 24009 Calvert County, Maryland          92094\n11 24015 Cecil County, Maryland           102889\n12 24045 Wicomico County, Maryland        103222\n13 24037 St. Mary's County, Maryland      113182\n14 24043 Washington County, Maryland      150575\n\n\nIf we want to combine these tables into one dataset with every county’s information, a join isn’t the way to go. For that, we’d use bind_rows(). Thick of bind_rows as stacking two tables on top of each other. This code gives us 24 rows.\n\nall_county_population <- maryland_small_county_population %>%\n  bind_rows(maryland_large_county_population)\n\nall_county_population\n\n# A tibble: 24 × 3\n   geoid name                          total_pop\n   <chr> <chr>                             <dbl>\n 1 24029 Kent County, Maryland             19456\n 2 24039 Somerset County, Maryland         25699\n 3 24023 Garrett County, Maryland          29155\n 4 24019 Dorchester County, Maryland       31994\n 5 24011 Caroline County, Maryland         33260\n 6 24041 Talbot County, Maryland           37087\n 7 24035 Queen Anne's County, Maryland     50163\n 8 24047 Worcester County, Maryland        51967\n 9 24001 Allegany County, Maryland         71002\n10 24009 Calvert County, Maryland          92094\n# ℹ 14 more rows\n\n\nQuestion #1: \nImport maryland_tracts.xls and then md_counties_geoids.txt Perform an inner_join on maryland_tracts and md_counties on the common identifier.\nTIP: when the columns you want to join have different names: table1 %>% inner_join(table2, by=c(“table1_column”=“table2_column”))\nName the new table “md_smith_data”\n\n\n\nWith your maryland_smith_data table, produce a summary table showing the county name and the average census response rate for 2020. arrange the table in descending order. Identify the county with the highest average census response rate for 2020 and the county with the lowest.\n\n\n\nQuestion #2:  Answer this question in English: Write in Elms\nYou have a dataframe that contains information on the population of each Maryland county, structured like this example (the column headers and one example row):\ngeoid | name | total_pop 24029 | Kent County, Maryland | 19456\nYou have another dataframe with a count of large employers (over 10000 workers) by county in Maryland, structured like this example (the column headers and one example row):\nname | number_of_large employers Kent County | 15\nYou want to join these two dataframes to answer the question “which Maryland county has the highest number of large employees per person?”\nWhat do you think will happen when you attempt to “inner_join” these two tables?"
  },
  {
    "objectID": "r-join-bind.html#resources",
    "href": "r-join-bind.html#resources",
    "title": "15  Joins",
    "section": "15.5 Resources",
    "text": "15.5 Resources\n\nThe “Relational data” chapter in the R for Data Science textbook has details on exactly how a complex data set might fit together.\nAn example using a superheroes dataset, from Stat 545 at the University of British Columbia"
  },
  {
    "objectID": "r-data-cleaning.html",
    "href": "r-data-cleaning.html",
    "title": "16  Data Cleaning",
    "section": "",
    "text": "Any time you are given a dataset from anyone, you should immediately be suspicious. Is this data what I think it is? Does it include what I expect? Is there anything I need to know about it? Will it produce the information I expect?\nOne of the first things you should do is give it the smell test.\nFailure to give data the smell test can lead you to miss stories and get your butt kicked on a competitive story.\nWith data smells, we’re trying to find common mistakes in data. For more on data smells, read the GitHub wiki post that started it all. Some common data smells are:\nNot all of these data smells are detectable in code. You may have to ask people about the data. You may have to compare it to another dataset yourself. Does the agency that uses the data produce reports from the data? Does your analysis match those reports? That will expose wrongly derived data, or wrong units, or mistakes you made with inclusion or exclusion.\nThis chapter will take us through the first three, and look at common solutions."
  },
  {
    "objectID": "r-data-cleaning.html#wrong-type",
    "href": "r-data-cleaning.html#wrong-type",
    "title": "16  Data Cleaning",
    "section": "16.1 Wrong Type",
    "text": "16.1 Wrong Type\nFirst, let’s look at Wrong Type Of Data.\nLoad the tidyverse.\n\n# Remove scientific notation\noptions(scipen=999)\n# Load the tidyverse\nlibrary(tidyverse)\n\nWarning: package 'ggplot2' was built under R version 4.2.3\n\n\nWarning: package 'tidyr' was built under R version 4.2.3\n\n\nWarning: package 'readr' was built under R version 4.2.3\n\n\nWarning: package 'dplyr' was built under R version 4.2.3\n\n\nWarning: package 'stringr' was built under R version 4.2.3\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\n\nThen lets load a dataframe of Census population statistics, one row per state per year between the period of 2015 and 2020, with overall totals and totals by Census race categories. I have intentionally introduced some flaws that we’ll have to clean.\n\nstate_population_dirty <- read_rds(\"assets/data/state_population_dirty.rds\")\n\nglimpse(state_population_dirty)\n\nRows: 255\nColumns: 11\n$ geoid                        <chr> \"01\", \"01\", \"01\", \"01\", \"01\", \"02\", \"02\",…\n$ state                        <chr> \"Alabama\", \"Alabama\", \"Alabama\", \"Alabama…\n$ year                         <dbl> 2015, 2016, 2017, 2018, 2020, 2015, 2016,…\n$ total_pop                    <chr> \"4830620\", \"4841164\", \"4850771\", \"4864680…\n$ white_alone_pop              <dbl> 3325464, 3325037, 3317702, 3317453, 33028…\n$ black_alone_pop              <dbl> NA, NA, NA, NA, NA, 25022, 24443, 23702, …\n$ amer_ind_ak_native_alone_pop <dbl> 23850, 23919, 25098, 25576, 24764, 101313…\n$ asian_alone_pop              <dbl> 59599, 60744, 62815, 64609, 67909, 42921,…\n$ native_hi_alone_pop          <dbl> 2439, 2008, 2213, 2182, 2042, 8841, 8862,…\n$ other_race_alone_pop         <dbl> 61078, 61991, 66942, 70055, 74996, 9273, …\n$ two_or_more_races_pop        <dbl> 81646, 85412, 88834, 91619, 119322, 61755…\n\n\nLet’s sort the dataframe by total population to identify the state with the largest population in 2020.\n\nstate_population_dirty %>%\n  filter(year == 2020) %>%\n  arrange(desc(total_pop))\n\n# A tibble: 51 × 11\n   geoid state                 year total_pop white_alone_pop black_alone_pop\n   <chr> <chr>                <dbl> <chr>               <dbl>           <dbl>\n 1 26    Michigan              2020 9973907           7735902         1360149\n 2 10    Delaware              2020 967679             652587          212795\n 3 34    New Jersey            2020 8885418           5820147         1189681\n 4 46    South Dakota          2020 879336             735228           18836\n 5 51    Virginia              2020 8509358           5643436         1620649\n 6 38    North Dakota          2020 760394             651470           23959\n 7 53    Washington            2020 7512465           5523881          290245\n 8 02    Alaska                2020 736990             466961           23894\n 9 04    Arizona               2020 7174064           5292498          325105\n10 11    District of Columbia  2020 701974             288306          318631\n# ℹ 41 more rows\n# ℹ 5 more variables: amer_ind_ak_native_alone_pop <dbl>,\n#   asian_alone_pop <dbl>, native_hi_alone_pop <dbl>,\n#   other_race_alone_pop <dbl>, two_or_more_races_pop <dbl>\n\n\nSomething seems off. The largest U.S. states – New York, California, Texas – aren’t on this list. It’s topped by Michigan, with 9.9 million people, followed by Delaware with 967,000, followed by New Jersey with 8.8 million. It’s not treating the values in this column as numbers, but sorting them … alphabetically, in a sense.\nLet’s use glimpse to figure out why.\n\nglimpse(state_population_dirty)\n\nRows: 255\nColumns: 11\n$ geoid                        <chr> \"01\", \"01\", \"01\", \"01\", \"01\", \"02\", \"02\",…\n$ state                        <chr> \"Alabama\", \"Alabama\", \"Alabama\", \"Alabama…\n$ year                         <dbl> 2015, 2016, 2017, 2018, 2020, 2015, 2016,…\n$ total_pop                    <chr> \"4830620\", \"4841164\", \"4850771\", \"4864680…\n$ white_alone_pop              <dbl> 3325464, 3325037, 3317702, 3317453, 33028…\n$ black_alone_pop              <dbl> NA, NA, NA, NA, NA, 25022, 24443, 23702, …\n$ amer_ind_ak_native_alone_pop <dbl> 23850, 23919, 25098, 25576, 24764, 101313…\n$ asian_alone_pop              <dbl> 59599, 60744, 62815, 64609, 67909, 42921,…\n$ native_hi_alone_pop          <dbl> 2439, 2008, 2213, 2182, 2042, 8841, 8862,…\n$ other_race_alone_pop         <dbl> 61078, 61991, 66942, 70055, 74996, 9273, …\n$ two_or_more_races_pop        <dbl> 81646, 85412, 88834, 91619, 119322, 61755…\n\n\nHere we can see the column name, sample values, and the data type. Most of the number columns in this dataframe are stored as numbers (“dbl”). But not the value in total_pop. It’s stored as “character”. R is interpreting as a text string. To sort properly, we’ll need to change it. Let’s update the dataframe by mutating that column to change the data type to numeric.\n\nstate_population_dirty <- state_population_dirty %>%\n  mutate(total_pop = as.numeric(total_pop))\n\nglimpse(state_population_dirty)\n\nRows: 255\nColumns: 11\n$ geoid                        <chr> \"01\", \"01\", \"01\", \"01\", \"01\", \"02\", \"02\",…\n$ state                        <chr> \"Alabama\", \"Alabama\", \"Alabama\", \"Alabama…\n$ year                         <dbl> 2015, 2016, 2017, 2018, 2020, 2015, 2016,…\n$ total_pop                    <dbl> 4830620, 4841164, 4850771, 4864680, 48931…\n$ white_alone_pop              <dbl> 3325464, 3325037, 3317702, 3317453, 33028…\n$ black_alone_pop              <dbl> NA, NA, NA, NA, NA, 25022, 24443, 23702, …\n$ amer_ind_ak_native_alone_pop <dbl> 23850, 23919, 25098, 25576, 24764, 101313…\n$ asian_alone_pop              <dbl> 59599, 60744, 62815, 64609, 67909, 42921,…\n$ native_hi_alone_pop          <dbl> 2439, 2008, 2213, 2182, 2042, 8841, 8862,…\n$ other_race_alone_pop         <dbl> 61078, 61991, 66942, 70055, 74996, 9273, …\n$ two_or_more_races_pop        <dbl> 81646, 85412, 88834, 91619, 119322, 61755…\n\n\nNow when we sort, it works.\n\nstate_population_dirty %>%\n  filter(year == 2020) %>%\n  arrange(desc(total_pop))\n\n# A tibble: 51 × 11\n   geoid state           year total_pop white_alone_pop black_alone_pop\n   <chr> <chr>          <dbl>     <dbl>           <dbl>           <dbl>\n 1 06    California      2020  39346023        22053721         2250962\n 2 48    Texas           2020  28635442        19805623         3464424\n 3 12    Florida         2020  21216924        15199588         3381061\n 4 36    New York        2020  19514849        12160045         3002401\n 5 42    Pennsylvania    2020  12794885        10155004         1419582\n 6 17    Illinois        2020  12716164         8874067         1796660\n 7 39    Ohio            2020  11675275         9394878         1442655\n 8 13    Georgia         2020  10516579         6020265         3319844\n 9 37    North Carolina  2020  10386227         7019443         2217522\n10 26    Michigan        2020   9973907         7735902         1360149\n# ℹ 41 more rows\n# ℹ 5 more variables: amer_ind_ak_native_alone_pop <dbl>,\n#   asian_alone_pop <dbl>, native_hi_alone_pop <dbl>,\n#   other_race_alone_pop <dbl>, two_or_more_races_pop <dbl>"
  },
  {
    "objectID": "r-data-cleaning.html#missing-data",
    "href": "r-data-cleaning.html#missing-data",
    "title": "16  Data Cleaning",
    "section": "16.2 Missing Data",
    "text": "16.2 Missing Data\nThe second smell we can find in code is missing data.\nLet’s try to calculate the total Black alone population for the U.S.\n\nstate_population_dirty %>%\n  filter(year == 2020) %>%\n  summarise(\n    total_us_black_alone_population = sum(black_alone_pop)\n  )\n\n# A tibble: 1 × 1\n  total_us_black_alone_population\n                            <dbl>\n1                              NA\n\n\nWe get an NA value, which isn’t correct. Let’s examine the values in that column to see why.\n\nstate_population_dirty \n\n# A tibble: 255 × 11\n   geoid state    year total_pop white_alone_pop black_alone_pop\n   <chr> <chr>   <dbl>     <dbl>           <dbl>           <dbl>\n 1 01    Alabama  2015   4830620         3325464              NA\n 2 01    Alabama  2016   4841164         3325037              NA\n 3 01    Alabama  2017   4850771         3317702              NA\n 4 01    Alabama  2018   4864680         3317453              NA\n 5 01    Alabama  2020   4893186         3302834              NA\n 6 02    Alaska   2015    733375          484250           25022\n 7 02    Alaska   2016    736855          483518           24443\n 8 02    Alaska   2017    738565          481971           23702\n 9 02    Alaska   2018    738516          478834           24129\n10 02    Alaska   2020    736990          466961           23894\n# ℹ 245 more rows\n# ℹ 5 more variables: amer_ind_ak_native_alone_pop <dbl>,\n#   asian_alone_pop <dbl>, native_hi_alone_pop <dbl>,\n#   other_race_alone_pop <dbl>, two_or_more_races_pop <dbl>\n\n\nAh, we see a missing value for Alabama. Because of that value, the summarise calculation won’t work. We could tell R to ignore NA values when doing the calculation, by adding na.rm=TRUE to the sum function.\n\nstate_population_dirty %>%\n  filter(year == 2020) %>%\n  summarise(\n    total_us_black_alone_population = sum(black_alone_pop, na.rm=TRUE)\n  )\n\n# A tibble: 1 × 1\n  total_us_black_alone_population\n                            <dbl>\n1                        39926065\n\n\nBut! That’s not the right answer. We want to know the total for the U.S. including Alabama in 2020. So, we need to fix that value. We look up the value on the Census website, and determine it’s 1,301,319 for 2020. So let’s update the column. This uses a function called case_when() with mutate().\nHere’s how to interpret what the function below says.\n“Overwrite the black_alone_pop column with new values in one of the rows, and the old values for every other row. If the state column equals Alabama AND (the &) the year column equals 2020 THEN (the tilde or ~) put the value 1301319. In any other case (any other state, or Alabama in any other year than 2020), THEN keep the value that currently exists in the black_alone_pop column.\n\nstate_population_dirty <- state_population_dirty %>%\n  mutate(black_alone_pop = case_when(\n    state == \"Alabama\" & year == 2020 ~ 1301319,\n    TRUE ~ black_alone_pop\n  ))\n\nstate_population_dirty\n\n# A tibble: 255 × 11\n   geoid state    year total_pop white_alone_pop black_alone_pop\n   <chr> <chr>   <dbl>     <dbl>           <dbl>           <dbl>\n 1 01    Alabama  2015   4830620         3325464              NA\n 2 01    Alabama  2016   4841164         3325037              NA\n 3 01    Alabama  2017   4850771         3317702              NA\n 4 01    Alabama  2018   4864680         3317453              NA\n 5 01    Alabama  2020   4893186         3302834         1301319\n 6 02    Alaska   2015    733375          484250           25022\n 7 02    Alaska   2016    736855          483518           24443\n 8 02    Alaska   2017    738565          481971           23702\n 9 02    Alaska   2018    738516          478834           24129\n10 02    Alaska   2020    736990          466961           23894\n# ℹ 245 more rows\n# ℹ 5 more variables: amer_ind_ak_native_alone_pop <dbl>,\n#   asian_alone_pop <dbl>, native_hi_alone_pop <dbl>,\n#   other_race_alone_pop <dbl>, two_or_more_races_pop <dbl>\n\n\nNow when we run our summarization code, it works.\n\nstate_population_dirty %>%\n  filter(year == 2020) %>%\n  summarise(\n    total_us_black_alone_population = sum(black_alone_pop)\n  )\n\n# A tibble: 1 × 1\n  total_us_black_alone_population\n                            <dbl>\n1                        41227384"
  },
  {
    "objectID": "r-data-cleaning.html#gaps-in-data",
    "href": "r-data-cleaning.html#gaps-in-data",
    "title": "16  Data Cleaning",
    "section": "16.3 Gaps in data",
    "text": "16.3 Gaps in data\nLet’s now look at gaps in data. One type of gap in data has to do with time.\nLet’s calculate the average white alone population in Maryland over the period represented in the data, which is 2015 to 2020.\n\nstate_population_dirty %>%\n  filter(state == \"Maryland\") %>%\n  summarise(\n    mean_white_alone_pop = mean(white_alone_pop)\n  )\n\n# A tibble: 1 × 1\n  mean_white_alone_pop\n                 <dbl>\n1             3373558.\n\n\nDoes this represent the average white population from 2015 to 2020? Let’s take a closer look at the years represented in the data.\n\nstate_population_dirty %>%\n  filter(state == \"Maryland\") %>%\n  select(year)\n\n# A tibble: 5 × 1\n   year\n  <dbl>\n1  2015\n2  2016\n3  2017\n4  2018\n5  2020\n\n\nWe have 2015, 2016, 2017, 2018 and 2020. We can’t accurately say this represents the average over this period without 2019. So let’s add it, using a function called add_row() to put in the correct value 3,343,003. Note that it adds a row for 2019.\n\nstate_population_dirty %>%\n  filter(state == \"Maryland\") %>%\n  select(state,year,white_alone_pop) %>%\n  add_row(\n    state = \"Maryland\",\n    year = 2019,\n    white_alone_pop = 3343003\n  )\n\n# A tibble: 6 × 3\n  state     year white_alone_pop\n  <chr>    <dbl>           <dbl>\n1 Maryland  2015         3416107\n2 Maryland  2016         3408240\n3 Maryland  2017         3395212\n4 Maryland  2018         3373181\n5 Maryland  2020         3275048\n6 Maryland  2019         3343003\n\n\nNow, when we take the average for Maryland, it’s accurate.\n\nstate_population_dirty %>%\n  filter(state == \"Maryland\") %>%\n  select(state,year,white_alone_pop) %>%\n  add_row(\n    state = \"Maryland\",\n    year = 2019,\n    white_alone_pop = 3343003\n  ) %>%  \n  summarise(\n    mean_white_alone_pop = mean(white_alone_pop)\n  )\n\n# A tibble: 1 × 1\n  mean_white_alone_pop\n                 <dbl>\n1             3368465.\n\n\nQuestion #1:  Answer this question in English: Write in Elms\nYou have a dataframe that contains population statistics for each of 24 counties in Maryland, and you want to group and summarize to determine the total population for the state.\nThe first three rows of the data look like this:\nstate | county | population Maryland | PG | 1000000 MD | Montgomery | 1100000 md | Baltimore city | 900000\nWhat tidyverse method described in this lab would you use to clean the state column so that the group and summarization works properly.\nYou don’t need to write code, just explain in English on ELMS."
  },
  {
    "objectID": "r-data-cleaning.html#resources",
    "href": "r-data-cleaning.html#resources",
    "title": "16  Data Cleaning",
    "section": "16.4 Resources",
    "text": "16.4 Resources\n\nThe “Relational data” chapter in the R for Data Science textbook has details on exactly how a complex data set might fit together.\nAn example using a superheroes dataset, from Stat 545 at the University of British Columbia"
  },
  {
    "objectID": "r-publication.html",
    "href": "r-publication.html",
    "title": "17  The top matter",
    "section": "",
    "text": "When you produce findings from analysis that you want to share with non-technical colleagues – your code-allergic editor, perhaps – you can’t always expect them to be able to load up RStudio to run your code themselves. And you definitely can’t expect readers to do that, if you want to share the findings that support a story you’ve published.\nFortunately, working in Quarto markdown documents – .QMD files – allows us to easily publish a nice and tidy html page (or, if we prefer, a pdf or a word doc) with the results of our analysis. We can publish a page that contains text, tables, static or interactive visualizations, images, links and, if we want to show it, our code.\nThe process works like this:\nLet’s get an overview of the different parts of the QMD file, and then we’ll practice in another document.\nAt the top of the page is something we’ve seen in our templates for our major projects. It’s called “YAML”, and it provides styling and other information that will be included in the final html document we create.\nIn the example below, we’re providing a very bare bones set of YAML instructions. We’re giving our document a title, an author, a date (each time it’s run, the current date will be put in) and telling the document to output as html and use a built-in styling “theme” called cosmo.\nWe can also easily add a clickable table of contents and more, as this nice guide shows"
  },
  {
    "objectID": "r-publication.html#styled-text",
    "href": "r-publication.html#styled-text",
    "title": "17  The top matter",
    "section": "17.1 Styled Text",
    "text": "17.1 Styled Text\nAt the core, QMD files are text files, and they allow you to use a very lightweight “markup” language to style text, similar to html, but much less fussy than html.\nOutside of the codeblocks (the gray sections where we write code), we can style any text using standard markdown styling.\nThis is a nice guide to styling text with markdown: Markdown guide\nWe can create headings similar to html’s\n\nto\n\nwith hashtags.\n\n17.1.0.0.1 This is an h5\nWe can create links, like this: google\nWe can bold or italic text.\nWe can create bulleted lists\n\nbullet one\nbullet two\nbullet three"
  },
  {
    "objectID": "r-publication.html#code-blocks",
    "href": "r-publication.html#code-blocks",
    "title": "17  The top matter",
    "section": "17.2 Code blocks",
    "text": "17.2 Code blocks\nWe can also add special code inside of code blocks – the gray sections where we write code – that control how they render in our html document. These output options let us do things like:\n\nShow or hide the code when we render our html document (echo: true or false)\nPrevent the code from actually running when we render our html document (eval: true or false)\nHide warnings from outputing when we render our html document (warning: true or false)\n\nThere’s a full guide here.\nThe code below, for example, will output the text inside the print statement when rendered to html, but the actual code – the print() function – will be hidden.\n\n\n[1] \"the code will be hidden in the rendered html document, but this will output\""
  },
  {
    "objectID": "r-writing-data.html",
    "href": "r-writing-data.html",
    "title": "18  Writing About Data",
    "section": "",
    "text": "(9-2-2024 version)\n\n\nThis module addresses:–Writing Style–Common Math Errors–The Base–Common Errors & Style Problems–Accuracy Checklist–AP Style on Numerals\n\n\n\nWriting Style Notes \nDon’t Overwhelm. \nBe careful when you use a number in a story. You don’t want to overwhelm the reader. You want to use a number of emphasize a specific point, not to prove that you were able to produce a results of a calculation.\nStrategies to help people comprehend your data:\n\nUse ratios instead of percents\nRatios are better in counts of 10. 6 of 10, 4 of 10. It’s easy to translate that from a percentage to a ratio.\nRound your numbers. If the Census Bureau says there is 287,401 people in Lincoln, round to 287,000 people. That’s still accurate.\nControl the decimals. AP Style recommends rounding to the two decimals. Unless you need that precision (usually you don’t), just round to the whole number\nDitch the decimals for something that can’t be divided (i.e. people)\n\n Writing on a Human Scale \n\n\n\nDon’t write for robots\n\n\nExpress Your Numbers on Human Scale, not Robot Scale\n\nRobot scale: .07% of kindergarteners had a medical exemption to vaccines.\nHuman scale: 7 out of 10,000 kindergarteners had a medical exemption\nRobot scale: The state spends $16.6 billion per year on health care.\nHuman scale: Annually, the state spends the equivalent of $3,000 per person on health care.\n\n(Thanks Maryjo Webster for the examples)\nWhen exact numbers matter \nDuring the Covid19 pandemic, we used specific numbers for case counts and deaths. No rounding. We wouldn’t write “there are more than 70 cases in Lancaster County” on Monday. People wanted the exact number: “there were 75 cases in Lancaster County.”\nDitto with “almost 30 deaths.” Give the specific number: 28 deaths. Do not round bodies.\nMore Writing Style Tips \nDon’t use the “respectively” construction. It confuses the readers and leads to data errors.Example: “Other private trade schools also made the top 10 list, such as Philander Smith in Little Rock and Bryan University in Rogers, with increases of 81 percent and 74 percent respectively.”Revision: “Other private trade schools also made the top 10 list, such as Philander Smith in Little Rock with an 81% increase and Bryan University in Rogers, with a 74% increase.”\n\n\n \n\n\nMath is prickly / Photo, Rob Wells\n\n\nCommon Errors – MathPercent vs Percentage PointAt Lyon College, 67 percent of non-first-generation students paid back their loans within five years, while only 53 percent of first-generation students did the same, which results in a 14 percent POINT difference. The median debt for both types of students was the same though, at $12,000.You mean “percentage point.” 14 percent of 67 is 9.4. Check out Steve Doig’s useful Math Crib Sheet for Journalists that has many useful examples of common newsroom math.\n\n\nDon’t Forget The BaseStudent writes: “As of September 12, there was an increase of 173 cases in people ages 18 to 24. The 25 to 34 age group had the highest new case number, with 188 cases.” –Context is missing. An increase of 173 from what? Provide the base number.\n\n\n\n\nAvoid Errors and Style Problems\n\n\nCommon errors\n–Don’t begin a sentence with a number. Spell out numbers at the beginning of a sentence or just rephrase the sentence altogether.\n–Be alert to confusing millions, billions and trillions. Double check.\n\nCommon style problems\n–Context! “18% homelessness in a district” - compared to what? Provide a statewide average.\n–When using a ranking, abbreviate the “number,” i.e.: “He was my No. 1 choice.”\n–Order of numbers. I prefer to see the latest numbers first, THEN the older numbers. New material, then context.\n–Parallel comparisons. When possible, compare your data to the same period, i.e. summer to summer, avoid seasonal bias.\n\nRead the Associated Press chapter on proper handling of numerals\n\n\n\nCourtesy Merrill Perlman / Columbia Journalism Review\n\n\nMaryJo Webster’s “Writing With Numbers”\n\n\n\nAnother good resource is the Accuracy Checklist from the Donald W. Reynolds National Center for Business Journalism.",
    "crumbs": [
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Writing About Data</span>"
    ]
  },
  {
    "objectID": "appendix-math.html",
    "href": "appendix-math.html",
    "title": "(APPENDIX) Appendix",
    "section": "",
    "text": "Note the disclaimer in this story on police shootings by The Washington Post, in which changes in the rates of police shootings may just be random.↩︎\nIt’s impossible for a number to fall more than 100 percent. That would mean it went below zero and then no formula works. There’s no good way to show a percent change when a figure like annual company earnings goes from profit to loss.↩︎\nThey are part of the “Numbers in the Newsroom” book from which this guide is derived.↩︎\nI’m using the term “average” freely here. Technically, a simple average and median are measures of central tendency, but I’ll treat them as different types of averages for simplicity sake.↩︎\nThis is sort of an example of “Simpson’s paradox” in that an average hides meaningful trends among sub-populations.↩︎\nIn statistical programs like R, there are various ways to specify how to deal with medians when there are ties like this. This is the most common way, but it may not be the way your program handles it.↩︎"
  }
]